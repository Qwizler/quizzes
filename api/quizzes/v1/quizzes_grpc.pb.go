// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: quizzes/v1/quizzes.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Quizzes_CreateQuiz_FullMethodName = "/quiz.v1.Quizzes/CreateQuiz"
	Quizzes_GetQuiz_FullMethodName    = "/quiz.v1.Quizzes/GetQuiz"
	Quizzes_ListQuiz_FullMethodName   = "/quiz.v1.Quizzes/ListQuiz"
	Quizzes_UpdateQuiz_FullMethodName = "/quiz.v1.Quizzes/UpdateQuiz"
	Quizzes_DeleteQuiz_FullMethodName = "/quiz.v1.Quizzes/DeleteQuiz"
	Quizzes_SearchQuiz_FullMethodName = "/quiz.v1.Quizzes/SearchQuiz"
)

// QuizzesClient is the client API for Quizzes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizzesClient interface {
	CreateQuiz(ctx context.Context, in *CreateQuizRequest, opts ...grpc.CallOption) (*CreateQuizResponse, error)
	GetQuiz(ctx context.Context, in *GetQuizRequest, opts ...grpc.CallOption) (*GetQuizResponse, error)
	ListQuiz(ctx context.Context, in *ListQuizRequest, opts ...grpc.CallOption) (*ListQuizResponse, error)
	UpdateQuiz(ctx context.Context, in *UpdateQuizRequest, opts ...grpc.CallOption) (*UpdateQuizResponse, error)
	DeleteQuiz(ctx context.Context, in *DeleteQuizRequest, opts ...grpc.CallOption) (*DeleteQuizResponse, error)
	SearchQuiz(ctx context.Context, in *SearchQuizRequest, opts ...grpc.CallOption) (*SearchQuizResponse, error)
}

type quizzesClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizzesClient(cc grpc.ClientConnInterface) QuizzesClient {
	return &quizzesClient{cc}
}

func (c *quizzesClient) CreateQuiz(ctx context.Context, in *CreateQuizRequest, opts ...grpc.CallOption) (*CreateQuizResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQuizResponse)
	err := c.cc.Invoke(ctx, Quizzes_CreateQuiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizzesClient) GetQuiz(ctx context.Context, in *GetQuizRequest, opts ...grpc.CallOption) (*GetQuizResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuizResponse)
	err := c.cc.Invoke(ctx, Quizzes_GetQuiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizzesClient) ListQuiz(ctx context.Context, in *ListQuizRequest, opts ...grpc.CallOption) (*ListQuizResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQuizResponse)
	err := c.cc.Invoke(ctx, Quizzes_ListQuiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizzesClient) UpdateQuiz(ctx context.Context, in *UpdateQuizRequest, opts ...grpc.CallOption) (*UpdateQuizResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateQuizResponse)
	err := c.cc.Invoke(ctx, Quizzes_UpdateQuiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizzesClient) DeleteQuiz(ctx context.Context, in *DeleteQuizRequest, opts ...grpc.CallOption) (*DeleteQuizResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteQuizResponse)
	err := c.cc.Invoke(ctx, Quizzes_DeleteQuiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizzesClient) SearchQuiz(ctx context.Context, in *SearchQuizRequest, opts ...grpc.CallOption) (*SearchQuizResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchQuizResponse)
	err := c.cc.Invoke(ctx, Quizzes_SearchQuiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizzesServer is the server API for Quizzes service.
// All implementations must embed UnimplementedQuizzesServer
// for forward compatibility.
type QuizzesServer interface {
	CreateQuiz(context.Context, *CreateQuizRequest) (*CreateQuizResponse, error)
	GetQuiz(context.Context, *GetQuizRequest) (*GetQuizResponse, error)
	ListQuiz(context.Context, *ListQuizRequest) (*ListQuizResponse, error)
	UpdateQuiz(context.Context, *UpdateQuizRequest) (*UpdateQuizResponse, error)
	DeleteQuiz(context.Context, *DeleteQuizRequest) (*DeleteQuizResponse, error)
	SearchQuiz(context.Context, *SearchQuizRequest) (*SearchQuizResponse, error)
	mustEmbedUnimplementedQuizzesServer()
}

// UnimplementedQuizzesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuizzesServer struct{}

func (UnimplementedQuizzesServer) CreateQuiz(context.Context, *CreateQuizRequest) (*CreateQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuiz not implemented")
}
func (UnimplementedQuizzesServer) GetQuiz(context.Context, *GetQuizRequest) (*GetQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuiz not implemented")
}
func (UnimplementedQuizzesServer) ListQuiz(context.Context, *ListQuizRequest) (*ListQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuiz not implemented")
}
func (UnimplementedQuizzesServer) UpdateQuiz(context.Context, *UpdateQuizRequest) (*UpdateQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuiz not implemented")
}
func (UnimplementedQuizzesServer) DeleteQuiz(context.Context, *DeleteQuizRequest) (*DeleteQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuiz not implemented")
}
func (UnimplementedQuizzesServer) SearchQuiz(context.Context, *SearchQuizRequest) (*SearchQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchQuiz not implemented")
}
func (UnimplementedQuizzesServer) mustEmbedUnimplementedQuizzesServer() {}
func (UnimplementedQuizzesServer) testEmbeddedByValue()                 {}

// UnsafeQuizzesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizzesServer will
// result in compilation errors.
type UnsafeQuizzesServer interface {
	mustEmbedUnimplementedQuizzesServer()
}

func RegisterQuizzesServer(s grpc.ServiceRegistrar, srv QuizzesServer) {
	// If the following call pancis, it indicates UnimplementedQuizzesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Quizzes_ServiceDesc, srv)
}

func _Quizzes_CreateQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizzesServer).CreateQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quizzes_CreateQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizzesServer).CreateQuiz(ctx, req.(*CreateQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quizzes_GetQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizzesServer).GetQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quizzes_GetQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizzesServer).GetQuiz(ctx, req.(*GetQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quizzes_ListQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizzesServer).ListQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quizzes_ListQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizzesServer).ListQuiz(ctx, req.(*ListQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quizzes_UpdateQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizzesServer).UpdateQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quizzes_UpdateQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizzesServer).UpdateQuiz(ctx, req.(*UpdateQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quizzes_DeleteQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizzesServer).DeleteQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quizzes_DeleteQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizzesServer).DeleteQuiz(ctx, req.(*DeleteQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quizzes_SearchQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizzesServer).SearchQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quizzes_SearchQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizzesServer).SearchQuiz(ctx, req.(*SearchQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Quizzes_ServiceDesc is the grpc.ServiceDesc for Quizzes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Quizzes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quiz.v1.Quizzes",
	HandlerType: (*QuizzesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuiz",
			Handler:    _Quizzes_CreateQuiz_Handler,
		},
		{
			MethodName: "GetQuiz",
			Handler:    _Quizzes_GetQuiz_Handler,
		},
		{
			MethodName: "ListQuiz",
			Handler:    _Quizzes_ListQuiz_Handler,
		},
		{
			MethodName: "UpdateQuiz",
			Handler:    _Quizzes_UpdateQuiz_Handler,
		},
		{
			MethodName: "DeleteQuiz",
			Handler:    _Quizzes_DeleteQuiz_Handler,
		},
		{
			MethodName: "SearchQuiz",
			Handler:    _Quizzes_SearchQuiz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quizzes/v1/quizzes.proto",
}

const (
	Questions_CreateQuestion_FullMethodName          = "/quiz.v1.Questions/CreateQuestion"
	Questions_GetQuestion_FullMethodName             = "/quiz.v1.Questions/GetQuestion"
	Questions_ListQuestion_FullMethodName            = "/quiz.v1.Questions/ListQuestion"
	Questions_UpdateQuestion_FullMethodName          = "/quiz.v1.Questions/UpdateQuestion"
	Questions_DeleteQuestion_FullMethodName          = "/quiz.v1.Questions/DeleteQuestion"
	Questions_ReorderQuestion_FullMethodName         = "/quiz.v1.Questions/ReorderQuestion"
	Questions_ValidateQuestionAnswers_FullMethodName = "/quiz.v1.Questions/ValidateQuestionAnswers"
	Questions_AddAnswer_FullMethodName               = "/quiz.v1.Questions/AddAnswer"
	Questions_DeleteAnswer_FullMethodName            = "/quiz.v1.Questions/DeleteAnswer"
	Questions_OverrideAnswer_FullMethodName          = "/quiz.v1.Questions/OverrideAnswer"
	Questions_PutAnswers_FullMethodName              = "/quiz.v1.Questions/PutAnswers"
	Questions_ReorderAnswers_FullMethodName          = "/quiz.v1.Questions/ReorderAnswers"
)

// QuestionsClient is the client API for Questions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionsClient interface {
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error)
	GetQuestion(ctx context.Context, in *GetQuestionRequest, opts ...grpc.CallOption) (*GetQuestionResponse, error)
	ListQuestion(ctx context.Context, in *ListQuestionRequest, opts ...grpc.CallOption) (*ListQuestionResponse, error)
	UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*UpdateQuestionResponse, error)
	DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*DeleteQuestionResponse, error)
	ReorderQuestion(ctx context.Context, in *ReorderQuestionRequest, opts ...grpc.CallOption) (*ReorderQuestionResponse, error)
	ValidateQuestionAnswers(ctx context.Context, in *ValidateQuestionAnswersRequest, opts ...grpc.CallOption) (*ValidateQuestionAnswersResponse, error)
	AddAnswer(ctx context.Context, in *AddAnswerRequest, opts ...grpc.CallOption) (*AddAnswerResponse, error)
	DeleteAnswer(ctx context.Context, in *DeleteAnswerRequest, opts ...grpc.CallOption) (*DeleteAnswerResponse, error)
	OverrideAnswer(ctx context.Context, in *OverrideAnswerRequest, opts ...grpc.CallOption) (*OverrideAnswerResponse, error)
	PutAnswers(ctx context.Context, in *PutAnswersRequest, opts ...grpc.CallOption) (*PutAnswersResponse, error)
	ReorderAnswers(ctx context.Context, in *ReorderAnswersRequest, opts ...grpc.CallOption) (*ReorderAnswersResponse, error)
}

type questionsClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionsClient(cc grpc.ClientConnInterface) QuestionsClient {
	return &questionsClient{cc}
}

func (c *questionsClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQuestionResponse)
	err := c.cc.Invoke(ctx, Questions_CreateQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionsClient) GetQuestion(ctx context.Context, in *GetQuestionRequest, opts ...grpc.CallOption) (*GetQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionResponse)
	err := c.cc.Invoke(ctx, Questions_GetQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionsClient) ListQuestion(ctx context.Context, in *ListQuestionRequest, opts ...grpc.CallOption) (*ListQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQuestionResponse)
	err := c.cc.Invoke(ctx, Questions_ListQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionsClient) UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*UpdateQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateQuestionResponse)
	err := c.cc.Invoke(ctx, Questions_UpdateQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionsClient) DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*DeleteQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteQuestionResponse)
	err := c.cc.Invoke(ctx, Questions_DeleteQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionsClient) ReorderQuestion(ctx context.Context, in *ReorderQuestionRequest, opts ...grpc.CallOption) (*ReorderQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReorderQuestionResponse)
	err := c.cc.Invoke(ctx, Questions_ReorderQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionsClient) ValidateQuestionAnswers(ctx context.Context, in *ValidateQuestionAnswersRequest, opts ...grpc.CallOption) (*ValidateQuestionAnswersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateQuestionAnswersResponse)
	err := c.cc.Invoke(ctx, Questions_ValidateQuestionAnswers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionsClient) AddAnswer(ctx context.Context, in *AddAnswerRequest, opts ...grpc.CallOption) (*AddAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAnswerResponse)
	err := c.cc.Invoke(ctx, Questions_AddAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionsClient) DeleteAnswer(ctx context.Context, in *DeleteAnswerRequest, opts ...grpc.CallOption) (*DeleteAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAnswerResponse)
	err := c.cc.Invoke(ctx, Questions_DeleteAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionsClient) OverrideAnswer(ctx context.Context, in *OverrideAnswerRequest, opts ...grpc.CallOption) (*OverrideAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OverrideAnswerResponse)
	err := c.cc.Invoke(ctx, Questions_OverrideAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionsClient) PutAnswers(ctx context.Context, in *PutAnswersRequest, opts ...grpc.CallOption) (*PutAnswersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutAnswersResponse)
	err := c.cc.Invoke(ctx, Questions_PutAnswers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionsClient) ReorderAnswers(ctx context.Context, in *ReorderAnswersRequest, opts ...grpc.CallOption) (*ReorderAnswersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReorderAnswersResponse)
	err := c.cc.Invoke(ctx, Questions_ReorderAnswers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionsServer is the server API for Questions service.
// All implementations must embed UnimplementedQuestionsServer
// for forward compatibility.
type QuestionsServer interface {
	CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error)
	GetQuestion(context.Context, *GetQuestionRequest) (*GetQuestionResponse, error)
	ListQuestion(context.Context, *ListQuestionRequest) (*ListQuestionResponse, error)
	UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error)
	DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error)
	ReorderQuestion(context.Context, *ReorderQuestionRequest) (*ReorderQuestionResponse, error)
	ValidateQuestionAnswers(context.Context, *ValidateQuestionAnswersRequest) (*ValidateQuestionAnswersResponse, error)
	AddAnswer(context.Context, *AddAnswerRequest) (*AddAnswerResponse, error)
	DeleteAnswer(context.Context, *DeleteAnswerRequest) (*DeleteAnswerResponse, error)
	OverrideAnswer(context.Context, *OverrideAnswerRequest) (*OverrideAnswerResponse, error)
	PutAnswers(context.Context, *PutAnswersRequest) (*PutAnswersResponse, error)
	ReorderAnswers(context.Context, *ReorderAnswersRequest) (*ReorderAnswersResponse, error)
	mustEmbedUnimplementedQuestionsServer()
}

// UnimplementedQuestionsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuestionsServer struct{}

func (UnimplementedQuestionsServer) CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedQuestionsServer) GetQuestion(context.Context, *GetQuestionRequest) (*GetQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestion not implemented")
}
func (UnimplementedQuestionsServer) ListQuestion(context.Context, *ListQuestionRequest) (*ListQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuestion not implemented")
}
func (UnimplementedQuestionsServer) UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestion not implemented")
}
func (UnimplementedQuestionsServer) DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedQuestionsServer) ReorderQuestion(context.Context, *ReorderQuestionRequest) (*ReorderQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReorderQuestion not implemented")
}
func (UnimplementedQuestionsServer) ValidateQuestionAnswers(context.Context, *ValidateQuestionAnswersRequest) (*ValidateQuestionAnswersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateQuestionAnswers not implemented")
}
func (UnimplementedQuestionsServer) AddAnswer(context.Context, *AddAnswerRequest) (*AddAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAnswer not implemented")
}
func (UnimplementedQuestionsServer) DeleteAnswer(context.Context, *DeleteAnswerRequest) (*DeleteAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnswer not implemented")
}
func (UnimplementedQuestionsServer) OverrideAnswer(context.Context, *OverrideAnswerRequest) (*OverrideAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverrideAnswer not implemented")
}
func (UnimplementedQuestionsServer) PutAnswers(context.Context, *PutAnswersRequest) (*PutAnswersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutAnswers not implemented")
}
func (UnimplementedQuestionsServer) ReorderAnswers(context.Context, *ReorderAnswersRequest) (*ReorderAnswersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReorderAnswers not implemented")
}
func (UnimplementedQuestionsServer) mustEmbedUnimplementedQuestionsServer() {}
func (UnimplementedQuestionsServer) testEmbeddedByValue()                   {}

// UnsafeQuestionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionsServer will
// result in compilation errors.
type UnsafeQuestionsServer interface {
	mustEmbedUnimplementedQuestionsServer()
}

func RegisterQuestionsServer(s grpc.ServiceRegistrar, srv QuestionsServer) {
	// If the following call pancis, it indicates UnimplementedQuestionsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Questions_ServiceDesc, srv)
}

func _Questions_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Questions_CreateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Questions_GetQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsServer).GetQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Questions_GetQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsServer).GetQuestion(ctx, req.(*GetQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Questions_ListQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsServer).ListQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Questions_ListQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsServer).ListQuestion(ctx, req.(*ListQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Questions_UpdateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsServer).UpdateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Questions_UpdateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsServer).UpdateQuestion(ctx, req.(*UpdateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Questions_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Questions_DeleteQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsServer).DeleteQuestion(ctx, req.(*DeleteQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Questions_ReorderQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReorderQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsServer).ReorderQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Questions_ReorderQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsServer).ReorderQuestion(ctx, req.(*ReorderQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Questions_ValidateQuestionAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateQuestionAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsServer).ValidateQuestionAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Questions_ValidateQuestionAnswers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsServer).ValidateQuestionAnswers(ctx, req.(*ValidateQuestionAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Questions_AddAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsServer).AddAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Questions_AddAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsServer).AddAnswer(ctx, req.(*AddAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Questions_DeleteAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsServer).DeleteAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Questions_DeleteAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsServer).DeleteAnswer(ctx, req.(*DeleteAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Questions_OverrideAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverrideAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsServer).OverrideAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Questions_OverrideAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsServer).OverrideAnswer(ctx, req.(*OverrideAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Questions_PutAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsServer).PutAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Questions_PutAnswers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsServer).PutAnswers(ctx, req.(*PutAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Questions_ReorderAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReorderAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsServer).ReorderAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Questions_ReorderAnswers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsServer).ReorderAnswers(ctx, req.(*ReorderAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Questions_ServiceDesc is the grpc.ServiceDesc for Questions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Questions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quiz.v1.Questions",
	HandlerType: (*QuestionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuestion",
			Handler:    _Questions_CreateQuestion_Handler,
		},
		{
			MethodName: "GetQuestion",
			Handler:    _Questions_GetQuestion_Handler,
		},
		{
			MethodName: "ListQuestion",
			Handler:    _Questions_ListQuestion_Handler,
		},
		{
			MethodName: "UpdateQuestion",
			Handler:    _Questions_UpdateQuestion_Handler,
		},
		{
			MethodName: "DeleteQuestion",
			Handler:    _Questions_DeleteQuestion_Handler,
		},
		{
			MethodName: "ReorderQuestion",
			Handler:    _Questions_ReorderQuestion_Handler,
		},
		{
			MethodName: "ValidateQuestionAnswers",
			Handler:    _Questions_ValidateQuestionAnswers_Handler,
		},
		{
			MethodName: "AddAnswer",
			Handler:    _Questions_AddAnswer_Handler,
		},
		{
			MethodName: "DeleteAnswer",
			Handler:    _Questions_DeleteAnswer_Handler,
		},
		{
			MethodName: "OverrideAnswer",
			Handler:    _Questions_OverrideAnswer_Handler,
		},
		{
			MethodName: "PutAnswers",
			Handler:    _Questions_PutAnswers_Handler,
		},
		{
			MethodName: "ReorderAnswers",
			Handler:    _Questions_ReorderAnswers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quizzes/v1/quizzes.proto",
}
