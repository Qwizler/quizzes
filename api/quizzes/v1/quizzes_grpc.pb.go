// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: quizzes/v1/quizzes.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Quizzes_CreateQuiz_FullMethodName = "/quiz.v1.Quizzes/CreateQuiz"
	Quizzes_GetQuiz_FullMethodName    = "/quiz.v1.Quizzes/GetQuiz"
	Quizzes_ListQuiz_FullMethodName   = "/quiz.v1.Quizzes/ListQuiz"
	Quizzes_UpdateQuiz_FullMethodName = "/quiz.v1.Quizzes/UpdateQuiz"
	Quizzes_DeleteQuiz_FullMethodName = "/quiz.v1.Quizzes/DeleteQuiz"
	Quizzes_SearchQuiz_FullMethodName = "/quiz.v1.Quizzes/SearchQuiz"
)

// QuizzesClient is the client API for Quizzes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizzesClient interface {
	CreateQuiz(ctx context.Context, in *CreateQuizRequest, opts ...grpc.CallOption) (*CreateQuizResponse, error)
	GetQuiz(ctx context.Context, in *GetQuizRequest, opts ...grpc.CallOption) (*GetQuizResponse, error)
	ListQuiz(ctx context.Context, in *ListQuizRequest, opts ...grpc.CallOption) (*ListQuizResponse, error)
	UpdateQuiz(ctx context.Context, in *UpdateQuizRequest, opts ...grpc.CallOption) (*UpdateQuizResponse, error)
	DeleteQuiz(ctx context.Context, in *DeleteQuizRequest, opts ...grpc.CallOption) (*DeleteQuizResponse, error)
	SearchQuiz(ctx context.Context, in *SearchQuizRequest, opts ...grpc.CallOption) (*SearchQuizResponse, error)
}

type quizzesClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizzesClient(cc grpc.ClientConnInterface) QuizzesClient {
	return &quizzesClient{cc}
}

func (c *quizzesClient) CreateQuiz(ctx context.Context, in *CreateQuizRequest, opts ...grpc.CallOption) (*CreateQuizResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQuizResponse)
	err := c.cc.Invoke(ctx, Quizzes_CreateQuiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizzesClient) GetQuiz(ctx context.Context, in *GetQuizRequest, opts ...grpc.CallOption) (*GetQuizResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuizResponse)
	err := c.cc.Invoke(ctx, Quizzes_GetQuiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizzesClient) ListQuiz(ctx context.Context, in *ListQuizRequest, opts ...grpc.CallOption) (*ListQuizResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQuizResponse)
	err := c.cc.Invoke(ctx, Quizzes_ListQuiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizzesClient) UpdateQuiz(ctx context.Context, in *UpdateQuizRequest, opts ...grpc.CallOption) (*UpdateQuizResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateQuizResponse)
	err := c.cc.Invoke(ctx, Quizzes_UpdateQuiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizzesClient) DeleteQuiz(ctx context.Context, in *DeleteQuizRequest, opts ...grpc.CallOption) (*DeleteQuizResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteQuizResponse)
	err := c.cc.Invoke(ctx, Quizzes_DeleteQuiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizzesClient) SearchQuiz(ctx context.Context, in *SearchQuizRequest, opts ...grpc.CallOption) (*SearchQuizResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchQuizResponse)
	err := c.cc.Invoke(ctx, Quizzes_SearchQuiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizzesServer is the server API for Quizzes service.
// All implementations must embed UnimplementedQuizzesServer
// for forward compatibility.
type QuizzesServer interface {
	CreateQuiz(context.Context, *CreateQuizRequest) (*CreateQuizResponse, error)
	GetQuiz(context.Context, *GetQuizRequest) (*GetQuizResponse, error)
	ListQuiz(context.Context, *ListQuizRequest) (*ListQuizResponse, error)
	UpdateQuiz(context.Context, *UpdateQuizRequest) (*UpdateQuizResponse, error)
	DeleteQuiz(context.Context, *DeleteQuizRequest) (*DeleteQuizResponse, error)
	SearchQuiz(context.Context, *SearchQuizRequest) (*SearchQuizResponse, error)
	mustEmbedUnimplementedQuizzesServer()
}

// UnimplementedQuizzesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuizzesServer struct{}

func (UnimplementedQuizzesServer) CreateQuiz(context.Context, *CreateQuizRequest) (*CreateQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuiz not implemented")
}
func (UnimplementedQuizzesServer) GetQuiz(context.Context, *GetQuizRequest) (*GetQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuiz not implemented")
}
func (UnimplementedQuizzesServer) ListQuiz(context.Context, *ListQuizRequest) (*ListQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuiz not implemented")
}
func (UnimplementedQuizzesServer) UpdateQuiz(context.Context, *UpdateQuizRequest) (*UpdateQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuiz not implemented")
}
func (UnimplementedQuizzesServer) DeleteQuiz(context.Context, *DeleteQuizRequest) (*DeleteQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuiz not implemented")
}
func (UnimplementedQuizzesServer) SearchQuiz(context.Context, *SearchQuizRequest) (*SearchQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchQuiz not implemented")
}
func (UnimplementedQuizzesServer) mustEmbedUnimplementedQuizzesServer() {}
func (UnimplementedQuizzesServer) testEmbeddedByValue()                 {}

// UnsafeQuizzesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizzesServer will
// result in compilation errors.
type UnsafeQuizzesServer interface {
	mustEmbedUnimplementedQuizzesServer()
}

func RegisterQuizzesServer(s grpc.ServiceRegistrar, srv QuizzesServer) {
	// If the following call pancis, it indicates UnimplementedQuizzesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Quizzes_ServiceDesc, srv)
}

func _Quizzes_CreateQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizzesServer).CreateQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quizzes_CreateQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizzesServer).CreateQuiz(ctx, req.(*CreateQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quizzes_GetQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizzesServer).GetQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quizzes_GetQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizzesServer).GetQuiz(ctx, req.(*GetQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quizzes_ListQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizzesServer).ListQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quizzes_ListQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizzesServer).ListQuiz(ctx, req.(*ListQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quizzes_UpdateQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizzesServer).UpdateQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quizzes_UpdateQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizzesServer).UpdateQuiz(ctx, req.(*UpdateQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quizzes_DeleteQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizzesServer).DeleteQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quizzes_DeleteQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizzesServer).DeleteQuiz(ctx, req.(*DeleteQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quizzes_SearchQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizzesServer).SearchQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quizzes_SearchQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizzesServer).SearchQuiz(ctx, req.(*SearchQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Quizzes_ServiceDesc is the grpc.ServiceDesc for Quizzes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Quizzes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quiz.v1.Quizzes",
	HandlerType: (*QuizzesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuiz",
			Handler:    _Quizzes_CreateQuiz_Handler,
		},
		{
			MethodName: "GetQuiz",
			Handler:    _Quizzes_GetQuiz_Handler,
		},
		{
			MethodName: "ListQuiz",
			Handler:    _Quizzes_ListQuiz_Handler,
		},
		{
			MethodName: "UpdateQuiz",
			Handler:    _Quizzes_UpdateQuiz_Handler,
		},
		{
			MethodName: "DeleteQuiz",
			Handler:    _Quizzes_DeleteQuiz_Handler,
		},
		{
			MethodName: "SearchQuiz",
			Handler:    _Quizzes_SearchQuiz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quizzes/v1/quizzes.proto",
}

const (
	QuizQuestions_AddQuestion_FullMethodName    = "/quiz.v1.QuizQuestions/AddQuestion"
	QuizQuestions_UpdateQuestion_FullMethodName = "/quiz.v1.QuizQuestions/UpdateQuestion"
	QuizQuestions_DeleteQuestion_FullMethodName = "/quiz.v1.QuizQuestions/DeleteQuestion"
	QuizQuestions_ListQuestion_FullMethodName   = "/quiz.v1.QuizQuestions/ListQuestion"
)

// QuizQuestionsClient is the client API for QuizQuestions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizQuestionsClient interface {
	AddQuestion(ctx context.Context, in *AddQuestionRequest, opts ...grpc.CallOption) (*AddQuestionResponse, error)
	UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*UpdateQuestionResponse, error)
	DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*DeleteQuestionResponse, error)
	ListQuestion(ctx context.Context, in *ListQuestionRequest, opts ...grpc.CallOption) (*ListQuestionResponse, error)
}

type quizQuestionsClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizQuestionsClient(cc grpc.ClientConnInterface) QuizQuestionsClient {
	return &quizQuestionsClient{cc}
}

func (c *quizQuestionsClient) AddQuestion(ctx context.Context, in *AddQuestionRequest, opts ...grpc.CallOption) (*AddQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddQuestionResponse)
	err := c.cc.Invoke(ctx, QuizQuestions_AddQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizQuestionsClient) UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*UpdateQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateQuestionResponse)
	err := c.cc.Invoke(ctx, QuizQuestions_UpdateQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizQuestionsClient) DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*DeleteQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteQuestionResponse)
	err := c.cc.Invoke(ctx, QuizQuestions_DeleteQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizQuestionsClient) ListQuestion(ctx context.Context, in *ListQuestionRequest, opts ...grpc.CallOption) (*ListQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQuestionResponse)
	err := c.cc.Invoke(ctx, QuizQuestions_ListQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizQuestionsServer is the server API for QuizQuestions service.
// All implementations must embed UnimplementedQuizQuestionsServer
// for forward compatibility.
type QuizQuestionsServer interface {
	AddQuestion(context.Context, *AddQuestionRequest) (*AddQuestionResponse, error)
	UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error)
	DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error)
	ListQuestion(context.Context, *ListQuestionRequest) (*ListQuestionResponse, error)
	mustEmbedUnimplementedQuizQuestionsServer()
}

// UnimplementedQuizQuestionsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuizQuestionsServer struct{}

func (UnimplementedQuizQuestionsServer) AddQuestion(context.Context, *AddQuestionRequest) (*AddQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQuestion not implemented")
}
func (UnimplementedQuizQuestionsServer) UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestion not implemented")
}
func (UnimplementedQuizQuestionsServer) DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedQuizQuestionsServer) ListQuestion(context.Context, *ListQuestionRequest) (*ListQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuestion not implemented")
}
func (UnimplementedQuizQuestionsServer) mustEmbedUnimplementedQuizQuestionsServer() {}
func (UnimplementedQuizQuestionsServer) testEmbeddedByValue()                       {}

// UnsafeQuizQuestionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizQuestionsServer will
// result in compilation errors.
type UnsafeQuizQuestionsServer interface {
	mustEmbedUnimplementedQuizQuestionsServer()
}

func RegisterQuizQuestionsServer(s grpc.ServiceRegistrar, srv QuizQuestionsServer) {
	// If the following call pancis, it indicates UnimplementedQuizQuestionsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuizQuestions_ServiceDesc, srv)
}

func _QuizQuestions_AddQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizQuestionsServer).AddQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizQuestions_AddQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizQuestionsServer).AddQuestion(ctx, req.(*AddQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizQuestions_UpdateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizQuestionsServer).UpdateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizQuestions_UpdateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizQuestionsServer).UpdateQuestion(ctx, req.(*UpdateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizQuestions_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizQuestionsServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizQuestions_DeleteQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizQuestionsServer).DeleteQuestion(ctx, req.(*DeleteQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizQuestions_ListQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizQuestionsServer).ListQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizQuestions_ListQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizQuestionsServer).ListQuestion(ctx, req.(*ListQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuizQuestions_ServiceDesc is the grpc.ServiceDesc for QuizQuestions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuizQuestions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quiz.v1.QuizQuestions",
	HandlerType: (*QuizQuestionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddQuestion",
			Handler:    _QuizQuestions_AddQuestion_Handler,
		},
		{
			MethodName: "UpdateQuestion",
			Handler:    _QuizQuestions_UpdateQuestion_Handler,
		},
		{
			MethodName: "DeleteQuestion",
			Handler:    _QuizQuestions_DeleteQuestion_Handler,
		},
		{
			MethodName: "ListQuestion",
			Handler:    _QuizQuestions_ListQuestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quizzes/v1/quizzes.proto",
}

const (
	QuizAnswers_ValidateQuestionAnswers_FullMethodName = "/quiz.v1.QuizAnswers/ValidateQuestionAnswers"
	QuizAnswers_CreateChoice_FullMethodName            = "/quiz.v1.QuizAnswers/CreateChoice"
	QuizAnswers_UpdateChoice_FullMethodName            = "/quiz.v1.QuizAnswers/UpdateChoice"
	QuizAnswers_DeleteChoice_FullMethodName            = "/quiz.v1.QuizAnswers/DeleteChoice"
	QuizAnswers_ListChoice_FullMethodName              = "/quiz.v1.QuizAnswers/ListChoice"
)

// QuizAnswersClient is the client API for QuizAnswers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizAnswersClient interface {
	ValidateQuestionAnswers(ctx context.Context, in *ValidateQuestionAnswersRequest, opts ...grpc.CallOption) (*ValidateQuestionAnswersResponse, error)
	CreateChoice(ctx context.Context, in *CreateChoiceRequest, opts ...grpc.CallOption) (*CreateChoiceResponse, error)
	UpdateChoice(ctx context.Context, in *UpdateChoiceRequest, opts ...grpc.CallOption) (*UpdateChoiceResponse, error)
	DeleteChoice(ctx context.Context, in *DeleteChoiceRequest, opts ...grpc.CallOption) (*DeleteChoiceResponse, error)
	ListChoice(ctx context.Context, in *ListChoiceRequest, opts ...grpc.CallOption) (*ListChoiceResponse, error)
}

type quizAnswersClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizAnswersClient(cc grpc.ClientConnInterface) QuizAnswersClient {
	return &quizAnswersClient{cc}
}

func (c *quizAnswersClient) ValidateQuestionAnswers(ctx context.Context, in *ValidateQuestionAnswersRequest, opts ...grpc.CallOption) (*ValidateQuestionAnswersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateQuestionAnswersResponse)
	err := c.cc.Invoke(ctx, QuizAnswers_ValidateQuestionAnswers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizAnswersClient) CreateChoice(ctx context.Context, in *CreateChoiceRequest, opts ...grpc.CallOption) (*CreateChoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChoiceResponse)
	err := c.cc.Invoke(ctx, QuizAnswers_CreateChoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizAnswersClient) UpdateChoice(ctx context.Context, in *UpdateChoiceRequest, opts ...grpc.CallOption) (*UpdateChoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateChoiceResponse)
	err := c.cc.Invoke(ctx, QuizAnswers_UpdateChoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizAnswersClient) DeleteChoice(ctx context.Context, in *DeleteChoiceRequest, opts ...grpc.CallOption) (*DeleteChoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteChoiceResponse)
	err := c.cc.Invoke(ctx, QuizAnswers_DeleteChoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizAnswersClient) ListChoice(ctx context.Context, in *ListChoiceRequest, opts ...grpc.CallOption) (*ListChoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChoiceResponse)
	err := c.cc.Invoke(ctx, QuizAnswers_ListChoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizAnswersServer is the server API for QuizAnswers service.
// All implementations must embed UnimplementedQuizAnswersServer
// for forward compatibility.
type QuizAnswersServer interface {
	ValidateQuestionAnswers(context.Context, *ValidateQuestionAnswersRequest) (*ValidateQuestionAnswersResponse, error)
	CreateChoice(context.Context, *CreateChoiceRequest) (*CreateChoiceResponse, error)
	UpdateChoice(context.Context, *UpdateChoiceRequest) (*UpdateChoiceResponse, error)
	DeleteChoice(context.Context, *DeleteChoiceRequest) (*DeleteChoiceResponse, error)
	ListChoice(context.Context, *ListChoiceRequest) (*ListChoiceResponse, error)
	mustEmbedUnimplementedQuizAnswersServer()
}

// UnimplementedQuizAnswersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuizAnswersServer struct{}

func (UnimplementedQuizAnswersServer) ValidateQuestionAnswers(context.Context, *ValidateQuestionAnswersRequest) (*ValidateQuestionAnswersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateQuestionAnswers not implemented")
}
func (UnimplementedQuizAnswersServer) CreateChoice(context.Context, *CreateChoiceRequest) (*CreateChoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChoice not implemented")
}
func (UnimplementedQuizAnswersServer) UpdateChoice(context.Context, *UpdateChoiceRequest) (*UpdateChoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChoice not implemented")
}
func (UnimplementedQuizAnswersServer) DeleteChoice(context.Context, *DeleteChoiceRequest) (*DeleteChoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChoice not implemented")
}
func (UnimplementedQuizAnswersServer) ListChoice(context.Context, *ListChoiceRequest) (*ListChoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChoice not implemented")
}
func (UnimplementedQuizAnswersServer) mustEmbedUnimplementedQuizAnswersServer() {}
func (UnimplementedQuizAnswersServer) testEmbeddedByValue()                     {}

// UnsafeQuizAnswersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizAnswersServer will
// result in compilation errors.
type UnsafeQuizAnswersServer interface {
	mustEmbedUnimplementedQuizAnswersServer()
}

func RegisterQuizAnswersServer(s grpc.ServiceRegistrar, srv QuizAnswersServer) {
	// If the following call pancis, it indicates UnimplementedQuizAnswersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuizAnswers_ServiceDesc, srv)
}

func _QuizAnswers_ValidateQuestionAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateQuestionAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizAnswersServer).ValidateQuestionAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizAnswers_ValidateQuestionAnswers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizAnswersServer).ValidateQuestionAnswers(ctx, req.(*ValidateQuestionAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizAnswers_CreateChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizAnswersServer).CreateChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizAnswers_CreateChoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizAnswersServer).CreateChoice(ctx, req.(*CreateChoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizAnswers_UpdateChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizAnswersServer).UpdateChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizAnswers_UpdateChoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizAnswersServer).UpdateChoice(ctx, req.(*UpdateChoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizAnswers_DeleteChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizAnswersServer).DeleteChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizAnswers_DeleteChoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizAnswersServer).DeleteChoice(ctx, req.(*DeleteChoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizAnswers_ListChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizAnswersServer).ListChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizAnswers_ListChoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizAnswersServer).ListChoice(ctx, req.(*ListChoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuizAnswers_ServiceDesc is the grpc.ServiceDesc for QuizAnswers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuizAnswers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quiz.v1.QuizAnswers",
	HandlerType: (*QuizAnswersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateQuestionAnswers",
			Handler:    _QuizAnswers_ValidateQuestionAnswers_Handler,
		},
		{
			MethodName: "CreateChoice",
			Handler:    _QuizAnswers_CreateChoice_Handler,
		},
		{
			MethodName: "UpdateChoice",
			Handler:    _QuizAnswers_UpdateChoice_Handler,
		},
		{
			MethodName: "DeleteChoice",
			Handler:    _QuizAnswers_DeleteChoice_Handler,
		},
		{
			MethodName: "ListChoice",
			Handler:    _QuizAnswers_ListChoice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quizzes/v1/quizzes.proto",
}
