syntax = "proto3";

package quiz.v1;

import "google/api/annotations.proto";

option go_package = "server/api/quizzes/v1;v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.quizzes.v1";
option java_outer_classname = "QuizProtoV1";

message Audit {
  optional string created_by = 1;
  optional string updated_by = 2;
  optional string deleted_by = 3;
  string created_at = 4;
  string updated_at = 5;
  string deleted_at = 6;
}
message Pagination {
  optional int32 page = 1;
  optional int32 page_size = 2;
}

service Quizzes {
  rpc CreateQuiz (CreateQuizRequest) returns (CreateQuizResponse) {
    option (google.api.http) = {
      post: "/quizzes"
      body: "*"
    };
  }
  rpc GetQuiz (GetQuizRequest) returns (GetQuizResponse) {
    option (google.api.http) = {
      get: "/quizzes/{id}"
    };
  }
  rpc ListQuiz (ListQuizRequest) returns (ListQuizResponse) {
    option (google.api.http) = {
      get: "/quizzes"
    };
  }
  rpc UpdateQuiz (UpdateQuizRequest) returns (UpdateQuizResponse) {
    option (google.api.http) = {
      patch: "/quizzes/{id}"
      body: "*"
    };
  }
  rpc DeleteQuiz (DeleteQuizRequest) returns (DeleteQuizResponse) {
    option (google.api.http) = {
      delete: "/quizzes/{id}"
    };
  }
  rpc SearchQuiz (SearchQuizRequest) returns (SearchQuizResponse) {
    option (google.api.http) = {
      get: "/quizzes/search"
    };
  }
}

enum Difficulty{
  EASY = 0;
  MEDIUM = 1;
  HARD = 2;
  EXPERT = 3;
}


message Quiz {
  string id = 1;
  string user_id = 2;
  string title = 3;
  string description = 4;
  optional uint64 duration = 5;
  optional Difficulty difficulty = 6;
  optional string thumbnail = 7;
  optional string cover = 8;
  optional string category = 9;
  repeated string tags = 10;
  map<string, string> metadata = 11;
  Audit audit = 12;
}

message CreateQuizRequest {
  string title = 1;
  string description = 2;
  optional uint64 duration = 3;
  optional string thumbnail = 4;
  optional string cover = 5;
  optional string category = 6;
  repeated string tags = 7;
  map<string, string> metadata = 8;
}
message CreateQuizResponse {
  Quiz quiz = 1;
}

message GetQuizRequest {
  string id = 1;
}
message GetQuizResponse {
  Quiz quiz = 1;
}

message ListQuizRequest {
  string quiz_id = 1;
  optional Pagination pagination = 2;
}
message ListQuizResponse {
  repeated Quiz quizzes = 1;
  optional Pagination pagination = 2;
}

message UpdateQuizRequest {
  string id = 1;
  optional string title = 2;
  optional string description = 3;
  optional uint64 duration = 4;
  optional string thumbnail = 5;
  optional string cover = 6;
  optional string category = 7;
  repeated string tags = 8;
  map<string, string> metadata = 9;
}
message UpdateQuizResponse {
  Quiz quiz = 1;
}

message DeleteQuizRequest {
  string id = 1;
}
message DeleteQuizResponse {
  string id = 1;
}

message SearchQuizRequest {
  string query = 1;
  optional Pagination pagination = 2;
}
message SearchQuizResponse {
  repeated Quiz quizzes = 1;
  optional Pagination pagination = 2;
}


service Questions {
  rpc CreateQuestion (CreateQuestionRequest) returns (CreateQuestionResponse) {
    option (google.api.http) = {
      post: "/quizzes/{quiz_id}/questions"
      body: "*"
    };
  }
  rpc GetQuestion (GetQuestionRequest) returns (GetQuestionResponse) {
    option (google.api.http) = {
      get: "/quizzes/{quiz_id}/questions/{question_id}"
    };
  }
  rpc ListQuestion (ListQuestionRequest) returns (ListQuestionResponse) {
    option (google.api.http) = {
      get: "/quizzes/{quiz_id}/questions"
    };
  }
  rpc UpdateQuestion (UpdateQuestionRequest) returns (UpdateQuestionResponse) {
    option (google.api.http) = {
      patch: "/quizzes/{quiz_id}/questions/{question_id}"
      body: "*"
    };
  }
  rpc DeleteQuestion (DeleteQuestionRequest) returns (DeleteQuestionResponse) {
    option (google.api.http) = {
      delete: "/quizzes/{quiz_id}/questions/{question_id}"
    };
  }
  rpc ReorderQuestion (ReorderQuestionRequest) returns (ReorderQuestionResponse) {
    option (google.api.http) = {
      patch: "/quizzes/{quiz_id}/questions/{question_id}/reorder"
      body: "*"
    };
  }
  rpc ValidateQuestionAnswers (ValidateQuestionAnswersRequest) returns (ValidateQuestionAnswersResponse) {
    option (google.api.http) = {
      post: "/quizzes/{question_id}/answers/validate"
      body: "*"
    };
  }
  rpc AddAnswer (AddAnswerRequest) returns (AddAnswerResponse) {
    option (google.api.http) = {
      post: "/quizzes/{quiz_id}/questions/{question_id}/answers"
      body: "*"
    };
  }
  rpc DeleteAnswer (DeleteAnswerRequest) returns (DeleteAnswerResponse) {
    option (google.api.http) = {
      delete: "/quizzes/{quiz_id}/questions/{question_id}/answers/{answer_id}"
    };
  }
  rpc OverrideAnswer (OverrideAnswerRequest) returns (OverrideAnswerResponse) {
    option (google.api.http) = {
      put: "/quizzes/{quiz_id}/questions/{question_id}/answers/{answer_id}"
      body: "*"
    };
  }
  rpc PutAnswers (PutAnswersRequest) returns (PutAnswersResponse) {
    option (google.api.http) = {
      put: "/quizzes/{quiz_id}/questions/{question_id}/answers"
      body: "*"
    };
  }
  rpc ReorderAnswers (ReorderAnswersRequest) returns (ReorderAnswersResponse) {
    option (google.api.http) = {
      patch: "/quizzes/{quiz_id}/questions/{question_id}/answers/reorder"
      body: "*"
    };
  }
}

message Answer {
  string id = 1;
  string text = 2;
  bool is_correct = 3;
  optional string explanation = 4;
}
message Question {
  message Answer {
    string ID = 1;
    string text = 2;
  }
  string id = 1;
  string quiz_id = 2;
  string question = 3;
  optional string hint = 4;
  repeated string answers = 5;
  Difficulty difficulty = 6;
  float order = 7;
  Audit audit = 8;
}

message AnswerCreation{
  string Text = 1;
  bool IsCorrect = 2;
  optional string explanation = 3;
}
message CreateQuestionRequest {
  string quiz_id = 1;
  string question = 2;
  optional Difficulty difficulty = 3;
  repeated AnswerCreation answers = 4;
  float order = 5;
  optional string hint = 6;
}

message CreateQuestionResponse {
  string id = 1;
}

message GetQuestionRequest {
  string quiz_id = 1;
  string question_id = 2;
}

message GetQuestionResponse {
  Question question = 1;
}

message ListQuestionRequest {
  string quiz_id = 1;
  optional Pagination pagination = 2;
}

message ListQuestionResponse {
  repeated Question questions = 1;
  Pagination pagination = 2;
}

message UpdateQuestionRequest {
  string quiz_id = 1;
  string question_id = 2;
  optional string question =4;
  optional string hint = 5;
  optional Difficulty difficulty = 6;
}
message UpdateQuestionResponse {
  Question question = 1;
}

message ReorderQuestionRequest {
  string quiz_id = 1;
  string question_id = 2;
  optional string above_question_id = 3;
  optional string below_question_id = 4;
  optional bool first = 5;
  optional bool last = 6;
}
message ReorderQuestionResponse {
  string quiz_id = 1;
  string question_id = 2;
  float order = 3;
}

message DeleteQuestionRequest {
  string quiz_id = 1;
  string question_id = 2;
}
message DeleteQuestionResponse {
  string quiz_id = 1;
  string question_id = 2;
}

message UserAnswer {
  string answer_id = 1;
  bool checked = 2;
}
message AnswerResult {
  string answer_id = 1;
  bool is_valid = 2;
  string explanation = 3;
}

message ValidateQuestionAnswersRequest {
  string question_id = 1;
  repeated UserAnswer answers = 2;
}
message ValidateQuestionAnswersResponse {
  string question_id = 1;
  repeated AnswerResult results = 2;
  float score = 3;
}

message AddAnswerRequest {
  string quiz_id = 1;
  string question_id = 2;
  AnswerCreation answer = 3;
}
message AddAnswerResponse {
  string quiz_id = 1;
  string question_id = 2;
  Answer answer = 3;
}

message DeleteAnswerRequest {
  string quiz_id = 1;
  string question_id = 2;
  string answer_id = 3;
}
message DeleteAnswerResponse {
  string quiz_id = 1;
  string question_id = 2;
  string answer_id = 3;
}


message OverrideAnswerRequest {
  string quiz_id = 1;
  string question_id = 2;
  string answer_id = 3;
  AnswerCreation answer = 4;
}
message OverrideAnswerResponse {
  string quiz_id = 1;
  string question_id = 2;
  Answer answer = 3;
}

message PutAnswersRequest {
  string quiz_id = 1;
  string question_id = 2;
  repeated AnswerCreation answers = 3;
}
message PutAnswersResponse {
  string quiz_id = 1;
  string question_id = 2;
  repeated Answer answers = 3;
}

message ReorderAnswersRequest {
  string quiz_id = 1;
  string question_id = 2;
  repeated string answer_ids = 3;
}
message ReorderAnswersResponse {
  string quiz_id = 1;
  string question_id = 2;
  repeated Answer answers = 3;
}