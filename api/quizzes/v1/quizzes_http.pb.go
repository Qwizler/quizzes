// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v5.28.3
// source: quizzes/v1/quizzes.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationQuizzesCreateQuiz = "/quiz.v1.Quizzes/CreateQuiz"
const OperationQuizzesDeleteQuiz = "/quiz.v1.Quizzes/DeleteQuiz"
const OperationQuizzesGetQuiz = "/quiz.v1.Quizzes/GetQuiz"
const OperationQuizzesListQuiz = "/quiz.v1.Quizzes/ListQuiz"
const OperationQuizzesSearchQuiz = "/quiz.v1.Quizzes/SearchQuiz"
const OperationQuizzesUpdateQuiz = "/quiz.v1.Quizzes/UpdateQuiz"

type QuizzesHTTPServer interface {
	CreateQuiz(context.Context, *CreateQuizRequest) (*CreateQuizResponse, error)
	DeleteQuiz(context.Context, *DeleteQuizRequest) (*DeleteQuizResponse, error)
	GetQuiz(context.Context, *GetQuizRequest) (*GetQuizResponse, error)
	ListQuiz(context.Context, *ListQuizRequest) (*ListQuizResponse, error)
	SearchQuiz(context.Context, *SearchQuizRequest) (*SearchQuizResponse, error)
	UpdateQuiz(context.Context, *UpdateQuizRequest) (*UpdateQuizResponse, error)
}

func RegisterQuizzesHTTPServer(s *http.Server, srv QuizzesHTTPServer) {
	r := s.Route("/")
	r.POST("/quizzes", _Quizzes_CreateQuiz0_HTTP_Handler(srv))
	r.GET("/quizzes/{id}", _Quizzes_GetQuiz0_HTTP_Handler(srv))
	r.GET("/quizzes", _Quizzes_ListQuiz0_HTTP_Handler(srv))
	r.PATCH("/quizzes/{id}", _Quizzes_UpdateQuiz0_HTTP_Handler(srv))
	r.DELETE("/quizzes/{id}", _Quizzes_DeleteQuiz0_HTTP_Handler(srv))
	r.GET("/quizzes/search", _Quizzes_SearchQuiz0_HTTP_Handler(srv))
}

func _Quizzes_CreateQuiz0_HTTP_Handler(srv QuizzesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateQuizRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuizzesCreateQuiz)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateQuiz(ctx, req.(*CreateQuizRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateQuizResponse)
		return ctx.Result(200, reply)
	}
}

func _Quizzes_GetQuiz0_HTTP_Handler(srv QuizzesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetQuizRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuizzesGetQuiz)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQuiz(ctx, req.(*GetQuizRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetQuizResponse)
		return ctx.Result(200, reply)
	}
}

func _Quizzes_ListQuiz0_HTTP_Handler(srv QuizzesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQuizRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuizzesListQuiz)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQuiz(ctx, req.(*ListQuizRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQuizResponse)
		return ctx.Result(200, reply)
	}
}

func _Quizzes_UpdateQuiz0_HTTP_Handler(srv QuizzesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateQuizRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuizzesUpdateQuiz)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQuiz(ctx, req.(*UpdateQuizRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateQuizResponse)
		return ctx.Result(200, reply)
	}
}

func _Quizzes_DeleteQuiz0_HTTP_Handler(srv QuizzesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteQuizRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuizzesDeleteQuiz)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteQuiz(ctx, req.(*DeleteQuizRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteQuizResponse)
		return ctx.Result(200, reply)
	}
}

func _Quizzes_SearchQuiz0_HTTP_Handler(srv QuizzesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchQuizRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuizzesSearchQuiz)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchQuiz(ctx, req.(*SearchQuizRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchQuizResponse)
		return ctx.Result(200, reply)
	}
}

type QuizzesHTTPClient interface {
	CreateQuiz(ctx context.Context, req *CreateQuizRequest, opts ...http.CallOption) (rsp *CreateQuizResponse, err error)
	DeleteQuiz(ctx context.Context, req *DeleteQuizRequest, opts ...http.CallOption) (rsp *DeleteQuizResponse, err error)
	GetQuiz(ctx context.Context, req *GetQuizRequest, opts ...http.CallOption) (rsp *GetQuizResponse, err error)
	ListQuiz(ctx context.Context, req *ListQuizRequest, opts ...http.CallOption) (rsp *ListQuizResponse, err error)
	SearchQuiz(ctx context.Context, req *SearchQuizRequest, opts ...http.CallOption) (rsp *SearchQuizResponse, err error)
	UpdateQuiz(ctx context.Context, req *UpdateQuizRequest, opts ...http.CallOption) (rsp *UpdateQuizResponse, err error)
}

type QuizzesHTTPClientImpl struct {
	cc *http.Client
}

func NewQuizzesHTTPClient(client *http.Client) QuizzesHTTPClient {
	return &QuizzesHTTPClientImpl{client}
}

func (c *QuizzesHTTPClientImpl) CreateQuiz(ctx context.Context, in *CreateQuizRequest, opts ...http.CallOption) (*CreateQuizResponse, error) {
	var out CreateQuizResponse
	pattern := "/quizzes"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuizzesCreateQuiz))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuizzesHTTPClientImpl) DeleteQuiz(ctx context.Context, in *DeleteQuizRequest, opts ...http.CallOption) (*DeleteQuizResponse, error) {
	var out DeleteQuizResponse
	pattern := "/quizzes/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuizzesDeleteQuiz))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuizzesHTTPClientImpl) GetQuiz(ctx context.Context, in *GetQuizRequest, opts ...http.CallOption) (*GetQuizResponse, error) {
	var out GetQuizResponse
	pattern := "/quizzes/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuizzesGetQuiz))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuizzesHTTPClientImpl) ListQuiz(ctx context.Context, in *ListQuizRequest, opts ...http.CallOption) (*ListQuizResponse, error) {
	var out ListQuizResponse
	pattern := "/quizzes"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuizzesListQuiz))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuizzesHTTPClientImpl) SearchQuiz(ctx context.Context, in *SearchQuizRequest, opts ...http.CallOption) (*SearchQuizResponse, error) {
	var out SearchQuizResponse
	pattern := "/quizzes/search"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuizzesSearchQuiz))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuizzesHTTPClientImpl) UpdateQuiz(ctx context.Context, in *UpdateQuizRequest, opts ...http.CallOption) (*UpdateQuizResponse, error) {
	var out UpdateQuizResponse
	pattern := "/quizzes/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuizzesUpdateQuiz))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationQuizQuestionsAddQuestion = "/quiz.v1.QuizQuestions/AddQuestion"
const OperationQuizQuestionsDeleteQuestion = "/quiz.v1.QuizQuestions/DeleteQuestion"
const OperationQuizQuestionsListQuestion = "/quiz.v1.QuizQuestions/ListQuestion"
const OperationQuizQuestionsUpdateQuestion = "/quiz.v1.QuizQuestions/UpdateQuestion"

type QuizQuestionsHTTPServer interface {
	AddQuestion(context.Context, *AddQuestionRequest) (*AddQuestionResponse, error)
	DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error)
	ListQuestion(context.Context, *ListQuestionRequest) (*ListQuestionResponse, error)
	UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error)
}

func RegisterQuizQuestionsHTTPServer(s *http.Server, srv QuizQuestionsHTTPServer) {
	r := s.Route("/")
	r.POST("/quizzes/{quiz_id}/questions", _QuizQuestions_AddQuestion0_HTTP_Handler(srv))
	r.PATCH("/quizzes/{quiz_id}/questions/{question_id}", _QuizQuestions_UpdateQuestion0_HTTP_Handler(srv))
	r.DELETE("/quizzes/{quiz_id}/questions/{question_id}", _QuizQuestions_DeleteQuestion0_HTTP_Handler(srv))
	r.GET("/quizzes/{quiz_id}/questions", _QuizQuestions_ListQuestion0_HTTP_Handler(srv))
}

func _QuizQuestions_AddQuestion0_HTTP_Handler(srv QuizQuestionsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddQuestionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuizQuestionsAddQuestion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddQuestion(ctx, req.(*AddQuestionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddQuestionResponse)
		return ctx.Result(200, reply)
	}
}

func _QuizQuestions_UpdateQuestion0_HTTP_Handler(srv QuizQuestionsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateQuestionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuizQuestionsUpdateQuestion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQuestion(ctx, req.(*UpdateQuestionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateQuestionResponse)
		return ctx.Result(200, reply)
	}
}

func _QuizQuestions_DeleteQuestion0_HTTP_Handler(srv QuizQuestionsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteQuestionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuizQuestionsDeleteQuestion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteQuestion(ctx, req.(*DeleteQuestionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteQuestionResponse)
		return ctx.Result(200, reply)
	}
}

func _QuizQuestions_ListQuestion0_HTTP_Handler(srv QuizQuestionsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQuestionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuizQuestionsListQuestion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQuestion(ctx, req.(*ListQuestionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQuestionResponse)
		return ctx.Result(200, reply)
	}
}

type QuizQuestionsHTTPClient interface {
	AddQuestion(ctx context.Context, req *AddQuestionRequest, opts ...http.CallOption) (rsp *AddQuestionResponse, err error)
	DeleteQuestion(ctx context.Context, req *DeleteQuestionRequest, opts ...http.CallOption) (rsp *DeleteQuestionResponse, err error)
	ListQuestion(ctx context.Context, req *ListQuestionRequest, opts ...http.CallOption) (rsp *ListQuestionResponse, err error)
	UpdateQuestion(ctx context.Context, req *UpdateQuestionRequest, opts ...http.CallOption) (rsp *UpdateQuestionResponse, err error)
}

type QuizQuestionsHTTPClientImpl struct {
	cc *http.Client
}

func NewQuizQuestionsHTTPClient(client *http.Client) QuizQuestionsHTTPClient {
	return &QuizQuestionsHTTPClientImpl{client}
}

func (c *QuizQuestionsHTTPClientImpl) AddQuestion(ctx context.Context, in *AddQuestionRequest, opts ...http.CallOption) (*AddQuestionResponse, error) {
	var out AddQuestionResponse
	pattern := "/quizzes/{quiz_id}/questions"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuizQuestionsAddQuestion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuizQuestionsHTTPClientImpl) DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...http.CallOption) (*DeleteQuestionResponse, error) {
	var out DeleteQuestionResponse
	pattern := "/quizzes/{quiz_id}/questions/{question_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuizQuestionsDeleteQuestion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuizQuestionsHTTPClientImpl) ListQuestion(ctx context.Context, in *ListQuestionRequest, opts ...http.CallOption) (*ListQuestionResponse, error) {
	var out ListQuestionResponse
	pattern := "/quizzes/{quiz_id}/questions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuizQuestionsListQuestion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuizQuestionsHTTPClientImpl) UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...http.CallOption) (*UpdateQuestionResponse, error) {
	var out UpdateQuestionResponse
	pattern := "/quizzes/{quiz_id}/questions/{question_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuizQuestionsUpdateQuestion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationQuizAnswersCreateChoice = "/quiz.v1.QuizAnswers/CreateChoice"
const OperationQuizAnswersDeleteChoice = "/quiz.v1.QuizAnswers/DeleteChoice"
const OperationQuizAnswersListChoice = "/quiz.v1.QuizAnswers/ListChoice"
const OperationQuizAnswersUpdateChoice = "/quiz.v1.QuizAnswers/UpdateChoice"
const OperationQuizAnswersValidateQuestionAnswers = "/quiz.v1.QuizAnswers/ValidateQuestionAnswers"

type QuizAnswersHTTPServer interface {
	CreateChoice(context.Context, *CreateChoiceRequest) (*CreateChoiceResponse, error)
	DeleteChoice(context.Context, *DeleteChoiceRequest) (*DeleteChoiceResponse, error)
	ListChoice(context.Context, *ListChoiceRequest) (*ListChoiceResponse, error)
	UpdateChoice(context.Context, *UpdateChoiceRequest) (*UpdateChoiceResponse, error)
	ValidateQuestionAnswers(context.Context, *ValidateQuestionAnswersRequest) (*ValidateQuestionAnswersResponse, error)
}

func RegisterQuizAnswersHTTPServer(s *http.Server, srv QuizAnswersHTTPServer) {
	r := s.Route("/")
	r.POST("/quizzes/{quiz_id}/questions/{question_id}/answers/validate", _QuizAnswers_ValidateQuestionAnswers0_HTTP_Handler(srv))
	r.POST("/quizzes/{quiz_id}/questions/{question_id}/choices", _QuizAnswers_CreateChoice0_HTTP_Handler(srv))
	r.PATCH("/quizzes/{quiz_id}/questions/{question_id}/choices/{choice_id}", _QuizAnswers_UpdateChoice0_HTTP_Handler(srv))
	r.DELETE("/quizzes/{quiz_id}/questions/{question_id}/choices/{choice_id}", _QuizAnswers_DeleteChoice0_HTTP_Handler(srv))
	r.GET("/quizzes/{quiz_id}/questions/{question_id}/choices", _QuizAnswers_ListChoice0_HTTP_Handler(srv))
}

func _QuizAnswers_ValidateQuestionAnswers0_HTTP_Handler(srv QuizAnswersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ValidateQuestionAnswersRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuizAnswersValidateQuestionAnswers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ValidateQuestionAnswers(ctx, req.(*ValidateQuestionAnswersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ValidateQuestionAnswersResponse)
		return ctx.Result(200, reply)
	}
}

func _QuizAnswers_CreateChoice0_HTTP_Handler(srv QuizAnswersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateChoiceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuizAnswersCreateChoice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateChoice(ctx, req.(*CreateChoiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateChoiceResponse)
		return ctx.Result(200, reply)
	}
}

func _QuizAnswers_UpdateChoice0_HTTP_Handler(srv QuizAnswersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateChoiceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuizAnswersUpdateChoice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateChoice(ctx, req.(*UpdateChoiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateChoiceResponse)
		return ctx.Result(200, reply)
	}
}

func _QuizAnswers_DeleteChoice0_HTTP_Handler(srv QuizAnswersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteChoiceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuizAnswersDeleteChoice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteChoice(ctx, req.(*DeleteChoiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteChoiceResponse)
		return ctx.Result(200, reply)
	}
}

func _QuizAnswers_ListChoice0_HTTP_Handler(srv QuizAnswersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListChoiceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuizAnswersListChoice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListChoice(ctx, req.(*ListChoiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListChoiceResponse)
		return ctx.Result(200, reply)
	}
}

type QuizAnswersHTTPClient interface {
	CreateChoice(ctx context.Context, req *CreateChoiceRequest, opts ...http.CallOption) (rsp *CreateChoiceResponse, err error)
	DeleteChoice(ctx context.Context, req *DeleteChoiceRequest, opts ...http.CallOption) (rsp *DeleteChoiceResponse, err error)
	ListChoice(ctx context.Context, req *ListChoiceRequest, opts ...http.CallOption) (rsp *ListChoiceResponse, err error)
	UpdateChoice(ctx context.Context, req *UpdateChoiceRequest, opts ...http.CallOption) (rsp *UpdateChoiceResponse, err error)
	ValidateQuestionAnswers(ctx context.Context, req *ValidateQuestionAnswersRequest, opts ...http.CallOption) (rsp *ValidateQuestionAnswersResponse, err error)
}

type QuizAnswersHTTPClientImpl struct {
	cc *http.Client
}

func NewQuizAnswersHTTPClient(client *http.Client) QuizAnswersHTTPClient {
	return &QuizAnswersHTTPClientImpl{client}
}

func (c *QuizAnswersHTTPClientImpl) CreateChoice(ctx context.Context, in *CreateChoiceRequest, opts ...http.CallOption) (*CreateChoiceResponse, error) {
	var out CreateChoiceResponse
	pattern := "/quizzes/{quiz_id}/questions/{question_id}/choices"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuizAnswersCreateChoice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuizAnswersHTTPClientImpl) DeleteChoice(ctx context.Context, in *DeleteChoiceRequest, opts ...http.CallOption) (*DeleteChoiceResponse, error) {
	var out DeleteChoiceResponse
	pattern := "/quizzes/{quiz_id}/questions/{question_id}/choices/{choice_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuizAnswersDeleteChoice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuizAnswersHTTPClientImpl) ListChoice(ctx context.Context, in *ListChoiceRequest, opts ...http.CallOption) (*ListChoiceResponse, error) {
	var out ListChoiceResponse
	pattern := "/quizzes/{quiz_id}/questions/{question_id}/choices"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuizAnswersListChoice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuizAnswersHTTPClientImpl) UpdateChoice(ctx context.Context, in *UpdateChoiceRequest, opts ...http.CallOption) (*UpdateChoiceResponse, error) {
	var out UpdateChoiceResponse
	pattern := "/quizzes/{quiz_id}/questions/{question_id}/choices/{choice_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuizAnswersUpdateChoice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuizAnswersHTTPClientImpl) ValidateQuestionAnswers(ctx context.Context, in *ValidateQuestionAnswersRequest, opts ...http.CallOption) (*ValidateQuestionAnswersResponse, error) {
	var out ValidateQuestionAnswersResponse
	pattern := "/quizzes/{quiz_id}/questions/{question_id}/answers/validate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuizAnswersValidateQuestionAnswers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
