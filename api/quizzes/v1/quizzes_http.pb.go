// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v5.28.3
// source: quizzes/v1/quizzes.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationQuizzesCreateQuiz = "/quiz.v1.Quizzes/CreateQuiz"
const OperationQuizzesDeleteQuiz = "/quiz.v1.Quizzes/DeleteQuiz"
const OperationQuizzesGetQuiz = "/quiz.v1.Quizzes/GetQuiz"
const OperationQuizzesListQuiz = "/quiz.v1.Quizzes/ListQuiz"
const OperationQuizzesSearchQuiz = "/quiz.v1.Quizzes/SearchQuiz"
const OperationQuizzesUpdateQuiz = "/quiz.v1.Quizzes/UpdateQuiz"

type QuizzesHTTPServer interface {
	CreateQuiz(context.Context, *CreateQuizRequest) (*CreateQuizResponse, error)
	DeleteQuiz(context.Context, *DeleteQuizRequest) (*DeleteQuizResponse, error)
	GetQuiz(context.Context, *GetQuizRequest) (*GetQuizResponse, error)
	ListQuiz(context.Context, *ListQuizRequest) (*ListQuizResponse, error)
	SearchQuiz(context.Context, *SearchQuizRequest) (*SearchQuizResponse, error)
	UpdateQuiz(context.Context, *UpdateQuizRequest) (*UpdateQuizResponse, error)
}

func RegisterQuizzesHTTPServer(s *http.Server, srv QuizzesHTTPServer) {
	r := s.Route("/")
	r.POST("/quizzes", _Quizzes_CreateQuiz0_HTTP_Handler(srv))
	r.GET("/quizzes/{id}", _Quizzes_GetQuiz0_HTTP_Handler(srv))
	r.GET("/quizzes", _Quizzes_ListQuiz0_HTTP_Handler(srv))
	r.PATCH("/quizzes/{id}", _Quizzes_UpdateQuiz0_HTTP_Handler(srv))
	r.DELETE("/quizzes/{id}", _Quizzes_DeleteQuiz0_HTTP_Handler(srv))
	r.GET("/quizzes/search", _Quizzes_SearchQuiz0_HTTP_Handler(srv))
}

func _Quizzes_CreateQuiz0_HTTP_Handler(srv QuizzesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateQuizRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuizzesCreateQuiz)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateQuiz(ctx, req.(*CreateQuizRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateQuizResponse)
		return ctx.Result(200, reply)
	}
}

func _Quizzes_GetQuiz0_HTTP_Handler(srv QuizzesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetQuizRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuizzesGetQuiz)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQuiz(ctx, req.(*GetQuizRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetQuizResponse)
		return ctx.Result(200, reply)
	}
}

func _Quizzes_ListQuiz0_HTTP_Handler(srv QuizzesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQuizRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuizzesListQuiz)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQuiz(ctx, req.(*ListQuizRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQuizResponse)
		return ctx.Result(200, reply)
	}
}

func _Quizzes_UpdateQuiz0_HTTP_Handler(srv QuizzesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateQuizRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuizzesUpdateQuiz)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQuiz(ctx, req.(*UpdateQuizRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateQuizResponse)
		return ctx.Result(200, reply)
	}
}

func _Quizzes_DeleteQuiz0_HTTP_Handler(srv QuizzesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteQuizRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuizzesDeleteQuiz)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteQuiz(ctx, req.(*DeleteQuizRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteQuizResponse)
		return ctx.Result(200, reply)
	}
}

func _Quizzes_SearchQuiz0_HTTP_Handler(srv QuizzesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchQuizRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuizzesSearchQuiz)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchQuiz(ctx, req.(*SearchQuizRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchQuizResponse)
		return ctx.Result(200, reply)
	}
}

type QuizzesHTTPClient interface {
	CreateQuiz(ctx context.Context, req *CreateQuizRequest, opts ...http.CallOption) (rsp *CreateQuizResponse, err error)
	DeleteQuiz(ctx context.Context, req *DeleteQuizRequest, opts ...http.CallOption) (rsp *DeleteQuizResponse, err error)
	GetQuiz(ctx context.Context, req *GetQuizRequest, opts ...http.CallOption) (rsp *GetQuizResponse, err error)
	ListQuiz(ctx context.Context, req *ListQuizRequest, opts ...http.CallOption) (rsp *ListQuizResponse, err error)
	SearchQuiz(ctx context.Context, req *SearchQuizRequest, opts ...http.CallOption) (rsp *SearchQuizResponse, err error)
	UpdateQuiz(ctx context.Context, req *UpdateQuizRequest, opts ...http.CallOption) (rsp *UpdateQuizResponse, err error)
}

type QuizzesHTTPClientImpl struct {
	cc *http.Client
}

func NewQuizzesHTTPClient(client *http.Client) QuizzesHTTPClient {
	return &QuizzesHTTPClientImpl{client}
}

func (c *QuizzesHTTPClientImpl) CreateQuiz(ctx context.Context, in *CreateQuizRequest, opts ...http.CallOption) (*CreateQuizResponse, error) {
	var out CreateQuizResponse
	pattern := "/quizzes"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuizzesCreateQuiz))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuizzesHTTPClientImpl) DeleteQuiz(ctx context.Context, in *DeleteQuizRequest, opts ...http.CallOption) (*DeleteQuizResponse, error) {
	var out DeleteQuizResponse
	pattern := "/quizzes/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuizzesDeleteQuiz))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuizzesHTTPClientImpl) GetQuiz(ctx context.Context, in *GetQuizRequest, opts ...http.CallOption) (*GetQuizResponse, error) {
	var out GetQuizResponse
	pattern := "/quizzes/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuizzesGetQuiz))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuizzesHTTPClientImpl) ListQuiz(ctx context.Context, in *ListQuizRequest, opts ...http.CallOption) (*ListQuizResponse, error) {
	var out ListQuizResponse
	pattern := "/quizzes"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuizzesListQuiz))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuizzesHTTPClientImpl) SearchQuiz(ctx context.Context, in *SearchQuizRequest, opts ...http.CallOption) (*SearchQuizResponse, error) {
	var out SearchQuizResponse
	pattern := "/quizzes/search"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuizzesSearchQuiz))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuizzesHTTPClientImpl) UpdateQuiz(ctx context.Context, in *UpdateQuizRequest, opts ...http.CallOption) (*UpdateQuizResponse, error) {
	var out UpdateQuizResponse
	pattern := "/quizzes/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuizzesUpdateQuiz))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationQuestionsAddAnswer = "/quiz.v1.Questions/AddAnswer"
const OperationQuestionsCreateQuestion = "/quiz.v1.Questions/CreateQuestion"
const OperationQuestionsDeleteAnswer = "/quiz.v1.Questions/DeleteAnswer"
const OperationQuestionsDeleteQuestion = "/quiz.v1.Questions/DeleteQuestion"
const OperationQuestionsGetQuestion = "/quiz.v1.Questions/GetQuestion"
const OperationQuestionsListQuestion = "/quiz.v1.Questions/ListQuestion"
const OperationQuestionsOverrideAnswer = "/quiz.v1.Questions/OverrideAnswer"
const OperationQuestionsPutAnswers = "/quiz.v1.Questions/PutAnswers"
const OperationQuestionsReorderAnswers = "/quiz.v1.Questions/ReorderAnswers"
const OperationQuestionsReorderQuestion = "/quiz.v1.Questions/ReorderQuestion"
const OperationQuestionsUpdateQuestion = "/quiz.v1.Questions/UpdateQuestion"
const OperationQuestionsValidateQuestionAnswers = "/quiz.v1.Questions/ValidateQuestionAnswers"

type QuestionsHTTPServer interface {
	AddAnswer(context.Context, *AddAnswerRequest) (*AddAnswerResponse, error)
	CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error)
	DeleteAnswer(context.Context, *DeleteAnswerRequest) (*DeleteAnswerResponse, error)
	DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error)
	GetQuestion(context.Context, *GetQuestionRequest) (*GetQuestionResponse, error)
	ListQuestion(context.Context, *ListQuestionRequest) (*ListQuestionResponse, error)
	OverrideAnswer(context.Context, *OverrideAnswerRequest) (*OverrideAnswerResponse, error)
	PutAnswers(context.Context, *PutAnswersRequest) (*PutAnswersResponse, error)
	ReorderAnswers(context.Context, *ReorderAnswersRequest) (*ReorderAnswersResponse, error)
	ReorderQuestion(context.Context, *ReorderQuestionRequest) (*ReorderQuestionResponse, error)
	UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error)
	ValidateQuestionAnswers(context.Context, *ValidateQuestionAnswersRequest) (*ValidateQuestionAnswersResponse, error)
}

func RegisterQuestionsHTTPServer(s *http.Server, srv QuestionsHTTPServer) {
	r := s.Route("/")
	r.POST("/quizzes/{quiz_id}/questions", _Questions_CreateQuestion0_HTTP_Handler(srv))
	r.GET("/quizzes/{quiz_id}/questions/{question_id}", _Questions_GetQuestion0_HTTP_Handler(srv))
	r.GET("/quizzes/{quiz_id}/questions", _Questions_ListQuestion0_HTTP_Handler(srv))
	r.PATCH("/quizzes/{quiz_id}/questions/{question_id}", _Questions_UpdateQuestion0_HTTP_Handler(srv))
	r.DELETE("/quizzes/{quiz_id}/questions/{question_id}", _Questions_DeleteQuestion0_HTTP_Handler(srv))
	r.PATCH("/quizzes/{quiz_id}/questions/{question_id}/reorder", _Questions_ReorderQuestion0_HTTP_Handler(srv))
	r.POST("/quizzes/{question_id}/answers/validate", _Questions_ValidateQuestionAnswers0_HTTP_Handler(srv))
	r.POST("/quizzes/{quiz_id}/questions/{question_id}/answers", _Questions_AddAnswer0_HTTP_Handler(srv))
	r.DELETE("/quizzes/{quiz_id}/questions/{question_id}/answers/{answer_id}", _Questions_DeleteAnswer0_HTTP_Handler(srv))
	r.PUT("/quizzes/{quiz_id}/questions/{question_id}/answers/{answer_id}", _Questions_OverrideAnswer0_HTTP_Handler(srv))
	r.PUT("/quizzes/{quiz_id}/questions/{question_id}/answers", _Questions_PutAnswers0_HTTP_Handler(srv))
	r.PATCH("/quizzes/{quiz_id}/questions/{question_id}/answers/reorder", _Questions_ReorderAnswers0_HTTP_Handler(srv))
}

func _Questions_CreateQuestion0_HTTP_Handler(srv QuestionsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateQuestionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionsCreateQuestion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateQuestion(ctx, req.(*CreateQuestionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateQuestionResponse)
		return ctx.Result(200, reply)
	}
}

func _Questions_GetQuestion0_HTTP_Handler(srv QuestionsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetQuestionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionsGetQuestion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQuestion(ctx, req.(*GetQuestionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetQuestionResponse)
		return ctx.Result(200, reply)
	}
}

func _Questions_ListQuestion0_HTTP_Handler(srv QuestionsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQuestionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionsListQuestion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQuestion(ctx, req.(*ListQuestionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQuestionResponse)
		return ctx.Result(200, reply)
	}
}

func _Questions_UpdateQuestion0_HTTP_Handler(srv QuestionsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateQuestionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionsUpdateQuestion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQuestion(ctx, req.(*UpdateQuestionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateQuestionResponse)
		return ctx.Result(200, reply)
	}
}

func _Questions_DeleteQuestion0_HTTP_Handler(srv QuestionsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteQuestionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionsDeleteQuestion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteQuestion(ctx, req.(*DeleteQuestionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteQuestionResponse)
		return ctx.Result(200, reply)
	}
}

func _Questions_ReorderQuestion0_HTTP_Handler(srv QuestionsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReorderQuestionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionsReorderQuestion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReorderQuestion(ctx, req.(*ReorderQuestionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReorderQuestionResponse)
		return ctx.Result(200, reply)
	}
}

func _Questions_ValidateQuestionAnswers0_HTTP_Handler(srv QuestionsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ValidateQuestionAnswersRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionsValidateQuestionAnswers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ValidateQuestionAnswers(ctx, req.(*ValidateQuestionAnswersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ValidateQuestionAnswersResponse)
		return ctx.Result(200, reply)
	}
}

func _Questions_AddAnswer0_HTTP_Handler(srv QuestionsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddAnswerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionsAddAnswer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddAnswer(ctx, req.(*AddAnswerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddAnswerResponse)
		return ctx.Result(200, reply)
	}
}

func _Questions_DeleteAnswer0_HTTP_Handler(srv QuestionsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAnswerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionsDeleteAnswer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAnswer(ctx, req.(*DeleteAnswerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAnswerResponse)
		return ctx.Result(200, reply)
	}
}

func _Questions_OverrideAnswer0_HTTP_Handler(srv QuestionsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OverrideAnswerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionsOverrideAnswer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OverrideAnswer(ctx, req.(*OverrideAnswerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OverrideAnswerResponse)
		return ctx.Result(200, reply)
	}
}

func _Questions_PutAnswers0_HTTP_Handler(srv QuestionsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PutAnswersRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionsPutAnswers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PutAnswers(ctx, req.(*PutAnswersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PutAnswersResponse)
		return ctx.Result(200, reply)
	}
}

func _Questions_ReorderAnswers0_HTTP_Handler(srv QuestionsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReorderAnswersRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionsReorderAnswers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReorderAnswers(ctx, req.(*ReorderAnswersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReorderAnswersResponse)
		return ctx.Result(200, reply)
	}
}

type QuestionsHTTPClient interface {
	AddAnswer(ctx context.Context, req *AddAnswerRequest, opts ...http.CallOption) (rsp *AddAnswerResponse, err error)
	CreateQuestion(ctx context.Context, req *CreateQuestionRequest, opts ...http.CallOption) (rsp *CreateQuestionResponse, err error)
	DeleteAnswer(ctx context.Context, req *DeleteAnswerRequest, opts ...http.CallOption) (rsp *DeleteAnswerResponse, err error)
	DeleteQuestion(ctx context.Context, req *DeleteQuestionRequest, opts ...http.CallOption) (rsp *DeleteQuestionResponse, err error)
	GetQuestion(ctx context.Context, req *GetQuestionRequest, opts ...http.CallOption) (rsp *GetQuestionResponse, err error)
	ListQuestion(ctx context.Context, req *ListQuestionRequest, opts ...http.CallOption) (rsp *ListQuestionResponse, err error)
	OverrideAnswer(ctx context.Context, req *OverrideAnswerRequest, opts ...http.CallOption) (rsp *OverrideAnswerResponse, err error)
	PutAnswers(ctx context.Context, req *PutAnswersRequest, opts ...http.CallOption) (rsp *PutAnswersResponse, err error)
	ReorderAnswers(ctx context.Context, req *ReorderAnswersRequest, opts ...http.CallOption) (rsp *ReorderAnswersResponse, err error)
	ReorderQuestion(ctx context.Context, req *ReorderQuestionRequest, opts ...http.CallOption) (rsp *ReorderQuestionResponse, err error)
	UpdateQuestion(ctx context.Context, req *UpdateQuestionRequest, opts ...http.CallOption) (rsp *UpdateQuestionResponse, err error)
	ValidateQuestionAnswers(ctx context.Context, req *ValidateQuestionAnswersRequest, opts ...http.CallOption) (rsp *ValidateQuestionAnswersResponse, err error)
}

type QuestionsHTTPClientImpl struct {
	cc *http.Client
}

func NewQuestionsHTTPClient(client *http.Client) QuestionsHTTPClient {
	return &QuestionsHTTPClientImpl{client}
}

func (c *QuestionsHTTPClientImpl) AddAnswer(ctx context.Context, in *AddAnswerRequest, opts ...http.CallOption) (*AddAnswerResponse, error) {
	var out AddAnswerResponse
	pattern := "/quizzes/{quiz_id}/questions/{question_id}/answers"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionsAddAnswer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionsHTTPClientImpl) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...http.CallOption) (*CreateQuestionResponse, error) {
	var out CreateQuestionResponse
	pattern := "/quizzes/{quiz_id}/questions"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionsCreateQuestion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionsHTTPClientImpl) DeleteAnswer(ctx context.Context, in *DeleteAnswerRequest, opts ...http.CallOption) (*DeleteAnswerResponse, error) {
	var out DeleteAnswerResponse
	pattern := "/quizzes/{quiz_id}/questions/{question_id}/answers/{answer_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuestionsDeleteAnswer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionsHTTPClientImpl) DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...http.CallOption) (*DeleteQuestionResponse, error) {
	var out DeleteQuestionResponse
	pattern := "/quizzes/{quiz_id}/questions/{question_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuestionsDeleteQuestion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionsHTTPClientImpl) GetQuestion(ctx context.Context, in *GetQuestionRequest, opts ...http.CallOption) (*GetQuestionResponse, error) {
	var out GetQuestionResponse
	pattern := "/quizzes/{quiz_id}/questions/{question_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuestionsGetQuestion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionsHTTPClientImpl) ListQuestion(ctx context.Context, in *ListQuestionRequest, opts ...http.CallOption) (*ListQuestionResponse, error) {
	var out ListQuestionResponse
	pattern := "/quizzes/{quiz_id}/questions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuestionsListQuestion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionsHTTPClientImpl) OverrideAnswer(ctx context.Context, in *OverrideAnswerRequest, opts ...http.CallOption) (*OverrideAnswerResponse, error) {
	var out OverrideAnswerResponse
	pattern := "/quizzes/{quiz_id}/questions/{question_id}/answers/{answer_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionsOverrideAnswer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionsHTTPClientImpl) PutAnswers(ctx context.Context, in *PutAnswersRequest, opts ...http.CallOption) (*PutAnswersResponse, error) {
	var out PutAnswersResponse
	pattern := "/quizzes/{quiz_id}/questions/{question_id}/answers"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionsPutAnswers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionsHTTPClientImpl) ReorderAnswers(ctx context.Context, in *ReorderAnswersRequest, opts ...http.CallOption) (*ReorderAnswersResponse, error) {
	var out ReorderAnswersResponse
	pattern := "/quizzes/{quiz_id}/questions/{question_id}/answers/reorder"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionsReorderAnswers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionsHTTPClientImpl) ReorderQuestion(ctx context.Context, in *ReorderQuestionRequest, opts ...http.CallOption) (*ReorderQuestionResponse, error) {
	var out ReorderQuestionResponse
	pattern := "/quizzes/{quiz_id}/questions/{question_id}/reorder"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionsReorderQuestion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionsHTTPClientImpl) UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...http.CallOption) (*UpdateQuestionResponse, error) {
	var out UpdateQuestionResponse
	pattern := "/quizzes/{quiz_id}/questions/{question_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionsUpdateQuestion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionsHTTPClientImpl) ValidateQuestionAnswers(ctx context.Context, in *ValidateQuestionAnswersRequest, opts ...http.CallOption) (*ValidateQuestionAnswersResponse, error) {
	var out ValidateQuestionAnswersResponse
	pattern := "/quizzes/{question_id}/answers/validate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionsValidateQuestionAnswers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
