// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.28.3
// source: quizzes/v1/quizzes.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Difficulty int32

const (
	Difficulty_EASY   Difficulty = 0
	Difficulty_MEDIUM Difficulty = 1
	Difficulty_HARD   Difficulty = 2
	Difficulty_EXPERT Difficulty = 3
)

// Enum value maps for Difficulty.
var (
	Difficulty_name = map[int32]string{
		0: "EASY",
		1: "MEDIUM",
		2: "HARD",
		3: "EXPERT",
	}
	Difficulty_value = map[string]int32{
		"EASY":   0,
		"MEDIUM": 1,
		"HARD":   2,
		"EXPERT": 3,
	}
)

func (x Difficulty) Enum() *Difficulty {
	p := new(Difficulty)
	*p = x
	return p
}

func (x Difficulty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Difficulty) Descriptor() protoreflect.EnumDescriptor {
	return file_quizzes_v1_quizzes_proto_enumTypes[0].Descriptor()
}

func (Difficulty) Type() protoreflect.EnumType {
	return &file_quizzes_v1_quizzes_proto_enumTypes[0]
}

func (x Difficulty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Difficulty.Descriptor instead.
func (Difficulty) EnumDescriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{0}
}

type Audit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedBy     *string                `protobuf:"bytes,1,opt,name=created_by,json=createdBy,proto3,oneof" json:"created_by,omitempty"`
	UpdatedBy     *string                `protobuf:"bytes,2,opt,name=updated_by,json=updatedBy,proto3,oneof" json:"updated_by,omitempty"`
	DeletedBy     *string                `protobuf:"bytes,3,opt,name=deleted_by,json=deletedBy,proto3,oneof" json:"deleted_by,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     string                 `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt     string                 `protobuf:"bytes,6,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Audit) Reset() {
	*x = Audit{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Audit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audit) ProtoMessage() {}

func (x *Audit) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audit.ProtoReflect.Descriptor instead.
func (*Audit) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{0}
}

func (x *Audit) GetCreatedBy() string {
	if x != nil && x.CreatedBy != nil {
		return *x.CreatedBy
	}
	return ""
}

func (x *Audit) GetUpdatedBy() string {
	if x != nil && x.UpdatedBy != nil {
		return *x.UpdatedBy
	}
	return ""
}

func (x *Audit) GetDeletedBy() string {
	if x != nil && x.DeletedBy != nil {
		return *x.DeletedBy
	}
	return ""
}

func (x *Audit) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Audit) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Audit) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

type Pagination struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *int32                 `protobuf:"varint,1,opt,name=page,proto3,oneof" json:"page,omitempty"`
	PageSize      *int32                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{1}
}

func (x *Pagination) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *Pagination) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

type Choice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Choice        string                 `protobuf:"bytes,2,opt,name=choice,proto3" json:"choice,omitempty"`
	Order         float32                `protobuf:"fixed32,3,opt,name=order,proto3" json:"order,omitempty"`
	IsCorrect     bool                   `protobuf:"varint,4,opt,name=is_correct,json=isCorrect,proto3" json:"is_correct,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Choice) Reset() {
	*x = Choice{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Choice) ProtoMessage() {}

func (x *Choice) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Choice.ProtoReflect.Descriptor instead.
func (*Choice) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{2}
}

func (x *Choice) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Choice) GetChoice() string {
	if x != nil {
		return x.Choice
	}
	return ""
}

func (x *Choice) GetOrder() float32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *Choice) GetIsCorrect() bool {
	if x != nil {
		return x.IsCorrect
	}
	return false
}

type QuizQuestion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Question      string                 `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	Answers       []string               `protobuf:"bytes,3,rep,name=answers,proto3" json:"answers,omitempty"`
	CorrectAnswer uint32                 `protobuf:"varint,4,opt,name=correct_answer,json=correctAnswer,proto3" json:"correct_answer,omitempty"` // 0-based index
	Difficulty    Difficulty             `protobuf:"varint,5,opt,name=difficulty,proto3,enum=quiz.v1.Difficulty" json:"difficulty,omitempty"`
	Audit         *Audit                 `protobuf:"bytes,6,opt,name=audit,proto3" json:"audit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuizQuestion) Reset() {
	*x = QuizQuestion{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuizQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizQuestion) ProtoMessage() {}

func (x *QuizQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizQuestion.ProtoReflect.Descriptor instead.
func (*QuizQuestion) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{3}
}

func (x *QuizQuestion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuizQuestion) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *QuizQuestion) GetAnswers() []string {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *QuizQuestion) GetCorrectAnswer() uint32 {
	if x != nil {
		return x.CorrectAnswer
	}
	return 0
}

func (x *QuizQuestion) GetDifficulty() Difficulty {
	if x != nil {
		return x.Difficulty
	}
	return Difficulty_EASY
}

func (x *QuizQuestion) GetAudit() *Audit {
	if x != nil {
		return x.Audit
	}
	return nil
}

type Quiz struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title         string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Duration      *uint64                `protobuf:"varint,5,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
	Difficulty    *Difficulty            `protobuf:"varint,6,opt,name=difficulty,proto3,enum=quiz.v1.Difficulty,oneof" json:"difficulty,omitempty"`
	Thumbnail     *string                `protobuf:"bytes,7,opt,name=thumbnail,proto3,oneof" json:"thumbnail,omitempty"`
	Cover         *string                `protobuf:"bytes,8,opt,name=cover,proto3,oneof" json:"cover,omitempty"`
	Category      *string                `protobuf:"bytes,9,opt,name=category,proto3,oneof" json:"category,omitempty"`
	Tags          []string               `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,11,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Audit         *Audit                 `protobuf:"bytes,12,opt,name=audit,proto3" json:"audit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Quiz) Reset() {
	*x = Quiz{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quiz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quiz) ProtoMessage() {}

func (x *Quiz) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quiz.ProtoReflect.Descriptor instead.
func (*Quiz) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{4}
}

func (x *Quiz) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Quiz) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Quiz) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Quiz) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Quiz) GetDuration() uint64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *Quiz) GetDifficulty() Difficulty {
	if x != nil && x.Difficulty != nil {
		return *x.Difficulty
	}
	return Difficulty_EASY
}

func (x *Quiz) GetThumbnail() string {
	if x != nil && x.Thumbnail != nil {
		return *x.Thumbnail
	}
	return ""
}

func (x *Quiz) GetCover() string {
	if x != nil && x.Cover != nil {
		return *x.Cover
	}
	return ""
}

func (x *Quiz) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *Quiz) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Quiz) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Quiz) GetAudit() *Audit {
	if x != nil {
		return x.Audit
	}
	return nil
}

type CreateQuizRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Duration      *uint64                `protobuf:"varint,3,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
	Thumbnail     *string                `protobuf:"bytes,4,opt,name=thumbnail,proto3,oneof" json:"thumbnail,omitempty"`
	Cover         *string                `protobuf:"bytes,5,opt,name=cover,proto3,oneof" json:"cover,omitempty"`
	Category      *string                `protobuf:"bytes,6,opt,name=category,proto3,oneof" json:"category,omitempty"`
	Tags          []string               `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateQuizRequest) Reset() {
	*x = CreateQuizRequest{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuizRequest) ProtoMessage() {}

func (x *CreateQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuizRequest.ProtoReflect.Descriptor instead.
func (*CreateQuizRequest) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{5}
}

func (x *CreateQuizRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateQuizRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateQuizRequest) GetDuration() uint64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CreateQuizRequest) GetThumbnail() string {
	if x != nil && x.Thumbnail != nil {
		return *x.Thumbnail
	}
	return ""
}

func (x *CreateQuizRequest) GetCover() string {
	if x != nil && x.Cover != nil {
		return *x.Cover
	}
	return ""
}

func (x *CreateQuizRequest) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *CreateQuizRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateQuizRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CreateQuizResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Quiz          *Quiz                  `protobuf:"bytes,1,opt,name=quiz,proto3" json:"quiz,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateQuizResponse) Reset() {
	*x = CreateQuizResponse{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQuizResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuizResponse) ProtoMessage() {}

func (x *CreateQuizResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuizResponse.ProtoReflect.Descriptor instead.
func (*CreateQuizResponse) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{6}
}

func (x *CreateQuizResponse) GetQuiz() *Quiz {
	if x != nil {
		return x.Quiz
	}
	return nil
}

type GetQuizRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQuizRequest) Reset() {
	*x = GetQuizRequest{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuizRequest) ProtoMessage() {}

func (x *GetQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuizRequest.ProtoReflect.Descriptor instead.
func (*GetQuizRequest) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{7}
}

func (x *GetQuizRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetQuizResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Quiz          *Quiz                  `protobuf:"bytes,1,opt,name=quiz,proto3" json:"quiz,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQuizResponse) Reset() {
	*x = GetQuizResponse{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuizResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuizResponse) ProtoMessage() {}

func (x *GetQuizResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuizResponse.ProtoReflect.Descriptor instead.
func (*GetQuizResponse) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{8}
}

func (x *GetQuizResponse) GetQuiz() *Quiz {
	if x != nil {
		return x.Quiz
	}
	return nil
}

type ListQuizRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Pagination            `protobuf:"bytes,2,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQuizRequest) Reset() {
	*x = ListQuizRequest{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuizRequest) ProtoMessage() {}

func (x *ListQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuizRequest.ProtoReflect.Descriptor instead.
func (*ListQuizRequest) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{9}
}

func (x *ListQuizRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListQuizResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Quizzes       []*Quiz                `protobuf:"bytes,1,rep,name=quizzes,proto3" json:"quizzes,omitempty"`
	Pagination    *Pagination            `protobuf:"bytes,2,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQuizResponse) Reset() {
	*x = ListQuizResponse{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQuizResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuizResponse) ProtoMessage() {}

func (x *ListQuizResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuizResponse.ProtoReflect.Descriptor instead.
func (*ListQuizResponse) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{10}
}

func (x *ListQuizResponse) GetQuizzes() []*Quiz {
	if x != nil {
		return x.Quizzes
	}
	return nil
}

func (x *ListQuizResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type UpdateQuizRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         *string                `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Duration      *uint64                `protobuf:"varint,4,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
	Thumbnail     *string                `protobuf:"bytes,5,opt,name=thumbnail,proto3,oneof" json:"thumbnail,omitempty"`
	Cover         *string                `protobuf:"bytes,6,opt,name=cover,proto3,oneof" json:"cover,omitempty"`
	Category      *string                `protobuf:"bytes,7,opt,name=category,proto3,oneof" json:"category,omitempty"`
	Tags          []string               `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateQuizRequest) Reset() {
	*x = UpdateQuizRequest{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuizRequest) ProtoMessage() {}

func (x *UpdateQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuizRequest.ProtoReflect.Descriptor instead.
func (*UpdateQuizRequest) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateQuizRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateQuizRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *UpdateQuizRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateQuizRequest) GetDuration() uint64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *UpdateQuizRequest) GetThumbnail() string {
	if x != nil && x.Thumbnail != nil {
		return *x.Thumbnail
	}
	return ""
}

func (x *UpdateQuizRequest) GetCover() string {
	if x != nil && x.Cover != nil {
		return *x.Cover
	}
	return ""
}

func (x *UpdateQuizRequest) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *UpdateQuizRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateQuizRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type UpdateQuizResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Quiz          *Quiz                  `protobuf:"bytes,1,opt,name=quiz,proto3" json:"quiz,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateQuizResponse) Reset() {
	*x = UpdateQuizResponse{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateQuizResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuizResponse) ProtoMessage() {}

func (x *UpdateQuizResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuizResponse.ProtoReflect.Descriptor instead.
func (*UpdateQuizResponse) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateQuizResponse) GetQuiz() *Quiz {
	if x != nil {
		return x.Quiz
	}
	return nil
}

type DeleteQuizRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteQuizRequest) Reset() {
	*x = DeleteQuizRequest{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuizRequest) ProtoMessage() {}

func (x *DeleteQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuizRequest.ProtoReflect.Descriptor instead.
func (*DeleteQuizRequest) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteQuizRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteQuizResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteQuizResponse) Reset() {
	*x = DeleteQuizResponse{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQuizResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuizResponse) ProtoMessage() {}

func (x *DeleteQuizResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuizResponse.ProtoReflect.Descriptor instead.
func (*DeleteQuizResponse) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteQuizResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SearchQuizRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Pagination    *Pagination            `protobuf:"bytes,2,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuizRequest) Reset() {
	*x = SearchQuizRequest{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuizRequest) ProtoMessage() {}

func (x *SearchQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuizRequest.ProtoReflect.Descriptor instead.
func (*SearchQuizRequest) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{15}
}

func (x *SearchQuizRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchQuizRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SearchQuizResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Quizzes       []*Quiz                `protobuf:"bytes,1,rep,name=quizzes,proto3" json:"quizzes,omitempty"`
	Pagination    *Pagination            `protobuf:"bytes,2,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchQuizResponse) Reset() {
	*x = SearchQuizResponse{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuizResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuizResponse) ProtoMessage() {}

func (x *SearchQuizResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuizResponse.ProtoReflect.Descriptor instead.
func (*SearchQuizResponse) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{16}
}

func (x *SearchQuizResponse) GetQuizzes() []*Quiz {
	if x != nil {
		return x.Quizzes
	}
	return nil
}

func (x *SearchQuizResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type AddQuestionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuizId        string                 `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	Question      string                 `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	Difficulty    Difficulty             `protobuf:"varint,5,opt,name=difficulty,proto3,enum=quiz.v1.Difficulty" json:"difficulty,omitempty"`
	Order         float32                `protobuf:"fixed32,6,opt,name=order,proto3" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddQuestionRequest) Reset() {
	*x = AddQuestionRequest{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddQuestionRequest) ProtoMessage() {}

func (x *AddQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddQuestionRequest.ProtoReflect.Descriptor instead.
func (*AddQuestionRequest) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{17}
}

func (x *AddQuestionRequest) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *AddQuestionRequest) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *AddQuestionRequest) GetDifficulty() Difficulty {
	if x != nil {
		return x.Difficulty
	}
	return Difficulty_EASY
}

func (x *AddQuestionRequest) GetOrder() float32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type AddQuestionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuizId        string                 `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	Question      *QuizQuestion          `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddQuestionResponse) Reset() {
	*x = AddQuestionResponse{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddQuestionResponse) ProtoMessage() {}

func (x *AddQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddQuestionResponse.ProtoReflect.Descriptor instead.
func (*AddQuestionResponse) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{18}
}

func (x *AddQuestionResponse) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *AddQuestionResponse) GetQuestion() *QuizQuestion {
	if x != nil {
		return x.Question
	}
	return nil
}

type UpdateQuestionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuizId        string                 `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	QuestionId    string                 `protobuf:"bytes,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Question      *QuizQuestion          `protobuf:"bytes,3,opt,name=question,proto3" json:"question,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateQuestionRequest) Reset() {
	*x = UpdateQuestionRequest{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuestionRequest) ProtoMessage() {}

func (x *UpdateQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuestionRequest.ProtoReflect.Descriptor instead.
func (*UpdateQuestionRequest) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateQuestionRequest) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *UpdateQuestionRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *UpdateQuestionRequest) GetQuestion() *QuizQuestion {
	if x != nil {
		return x.Question
	}
	return nil
}

type UpdateQuestionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuizId        string                 `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	QuestionId    string                 `protobuf:"bytes,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Question      *QuizQuestion          `protobuf:"bytes,3,opt,name=question,proto3" json:"question,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateQuestionResponse) Reset() {
	*x = UpdateQuestionResponse{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuestionResponse) ProtoMessage() {}

func (x *UpdateQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuestionResponse.ProtoReflect.Descriptor instead.
func (*UpdateQuestionResponse) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateQuestionResponse) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *UpdateQuestionResponse) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *UpdateQuestionResponse) GetQuestion() *QuizQuestion {
	if x != nil {
		return x.Question
	}
	return nil
}

type DeleteQuestionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuizId        string                 `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	QuestionId    string                 `protobuf:"bytes,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteQuestionRequest) Reset() {
	*x = DeleteQuestionRequest{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuestionRequest) ProtoMessage() {}

func (x *DeleteQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuestionRequest.ProtoReflect.Descriptor instead.
func (*DeleteQuestionRequest) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteQuestionRequest) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *DeleteQuestionRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

type DeleteQuestionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuizId        string                 `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteQuestionResponse) Reset() {
	*x = DeleteQuestionResponse{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuestionResponse) ProtoMessage() {}

func (x *DeleteQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuestionResponse.ProtoReflect.Descriptor instead.
func (*DeleteQuestionResponse) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteQuestionResponse) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

type ListQuestionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuizId        string                 `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQuestionRequest) Reset() {
	*x = ListQuestionRequest{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuestionRequest) ProtoMessage() {}

func (x *ListQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuestionRequest.ProtoReflect.Descriptor instead.
func (*ListQuestionRequest) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{23}
}

func (x *ListQuestionRequest) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

type ListQuestionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Questions     []*QuizQuestion        `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQuestionResponse) Reset() {
	*x = ListQuestionResponse{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuestionResponse) ProtoMessage() {}

func (x *ListQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuestionResponse.ProtoReflect.Descriptor instead.
func (*ListQuestionResponse) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{24}
}

func (x *ListQuestionResponse) GetQuestions() []*QuizQuestion {
	if x != nil {
		return x.Questions
	}
	return nil
}

type CreateChoiceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuizId        string                 `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	QuestionId    string                 `protobuf:"bytes,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Choice        string                 `protobuf:"bytes,3,opt,name=choice,proto3" json:"choice,omitempty"`
	Order         float32                `protobuf:"fixed32,4,opt,name=order,proto3" json:"order,omitempty"`
	IsCorrect     bool                   `protobuf:"varint,5,opt,name=is_correct,json=isCorrect,proto3" json:"is_correct,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateChoiceRequest) Reset() {
	*x = CreateChoiceRequest{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateChoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChoiceRequest) ProtoMessage() {}

func (x *CreateChoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChoiceRequest.ProtoReflect.Descriptor instead.
func (*CreateChoiceRequest) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{25}
}

func (x *CreateChoiceRequest) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *CreateChoiceRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *CreateChoiceRequest) GetChoice() string {
	if x != nil {
		return x.Choice
	}
	return ""
}

func (x *CreateChoiceRequest) GetOrder() float32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *CreateChoiceRequest) GetIsCorrect() bool {
	if x != nil {
		return x.IsCorrect
	}
	return false
}

type CreateChoiceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuizId        string                 `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	QuestionId    string                 `protobuf:"bytes,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Choice        *Choice                `protobuf:"bytes,3,opt,name=choice,proto3" json:"choice,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateChoiceResponse) Reset() {
	*x = CreateChoiceResponse{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateChoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChoiceResponse) ProtoMessage() {}

func (x *CreateChoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChoiceResponse.ProtoReflect.Descriptor instead.
func (*CreateChoiceResponse) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{26}
}

func (x *CreateChoiceResponse) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *CreateChoiceResponse) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *CreateChoiceResponse) GetChoice() *Choice {
	if x != nil {
		return x.Choice
	}
	return nil
}

type UpdateChoiceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuizId        string                 `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	QuestionId    string                 `protobuf:"bytes,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	ChoiceId      string                 `protobuf:"bytes,3,opt,name=choice_id,json=choiceId,proto3" json:"choice_id,omitempty"`
	Choice        string                 `protobuf:"bytes,4,opt,name=choice,proto3" json:"choice,omitempty"`
	Order         float32                `protobuf:"fixed32,5,opt,name=order,proto3" json:"order,omitempty"`
	IsCorrect     bool                   `protobuf:"varint,6,opt,name=is_correct,json=isCorrect,proto3" json:"is_correct,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateChoiceRequest) Reset() {
	*x = UpdateChoiceRequest{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateChoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChoiceRequest) ProtoMessage() {}

func (x *UpdateChoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChoiceRequest.ProtoReflect.Descriptor instead.
func (*UpdateChoiceRequest) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateChoiceRequest) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *UpdateChoiceRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *UpdateChoiceRequest) GetChoiceId() string {
	if x != nil {
		return x.ChoiceId
	}
	return ""
}

func (x *UpdateChoiceRequest) GetChoice() string {
	if x != nil {
		return x.Choice
	}
	return ""
}

func (x *UpdateChoiceRequest) GetOrder() float32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *UpdateChoiceRequest) GetIsCorrect() bool {
	if x != nil {
		return x.IsCorrect
	}
	return false
}

type UpdateChoiceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuizId        string                 `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	QuestionId    string                 `protobuf:"bytes,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	ChoiceId      string                 `protobuf:"bytes,3,opt,name=choice_id,json=choiceId,proto3" json:"choice_id,omitempty"`
	Choice        *Choice                `protobuf:"bytes,4,opt,name=choice,proto3" json:"choice,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateChoiceResponse) Reset() {
	*x = UpdateChoiceResponse{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateChoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChoiceResponse) ProtoMessage() {}

func (x *UpdateChoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChoiceResponse.ProtoReflect.Descriptor instead.
func (*UpdateChoiceResponse) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateChoiceResponse) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *UpdateChoiceResponse) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *UpdateChoiceResponse) GetChoiceId() string {
	if x != nil {
		return x.ChoiceId
	}
	return ""
}

func (x *UpdateChoiceResponse) GetChoice() *Choice {
	if x != nil {
		return x.Choice
	}
	return nil
}

type DeleteChoiceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuizId        string                 `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	QuestionId    string                 `protobuf:"bytes,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	ChoiceId      string                 `protobuf:"bytes,3,opt,name=choice_id,json=choiceId,proto3" json:"choice_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteChoiceRequest) Reset() {
	*x = DeleteChoiceRequest{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteChoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChoiceRequest) ProtoMessage() {}

func (x *DeleteChoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChoiceRequest.ProtoReflect.Descriptor instead.
func (*DeleteChoiceRequest) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteChoiceRequest) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *DeleteChoiceRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *DeleteChoiceRequest) GetChoiceId() string {
	if x != nil {
		return x.ChoiceId
	}
	return ""
}

type DeleteChoiceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuizId        string                 `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteChoiceResponse) Reset() {
	*x = DeleteChoiceResponse{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteChoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChoiceResponse) ProtoMessage() {}

func (x *DeleteChoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChoiceResponse.ProtoReflect.Descriptor instead.
func (*DeleteChoiceResponse) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteChoiceResponse) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

type ListChoiceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuizId        string                 `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	QuestionId    string                 `protobuf:"bytes,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListChoiceRequest) Reset() {
	*x = ListChoiceRequest{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListChoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChoiceRequest) ProtoMessage() {}

func (x *ListChoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChoiceRequest.ProtoReflect.Descriptor instead.
func (*ListChoiceRequest) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{31}
}

func (x *ListChoiceRequest) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *ListChoiceRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

type ListChoiceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Choices       []*Choice              `protobuf:"bytes,1,rep,name=choices,proto3" json:"choices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListChoiceResponse) Reset() {
	*x = ListChoiceResponse{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListChoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChoiceResponse) ProtoMessage() {}

func (x *ListChoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChoiceResponse.ProtoReflect.Descriptor instead.
func (*ListChoiceResponse) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{32}
}

func (x *ListChoiceResponse) GetChoices() []*Choice {
	if x != nil {
		return x.Choices
	}
	return nil
}

type AnswerResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Answer        string                 `protobuf:"bytes,1,opt,name=answer,proto3" json:"answer,omitempty"`
	IsCorrect     bool                   `protobuf:"varint,2,opt,name=is_correct,json=isCorrect,proto3" json:"is_correct,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnswerResult) Reset() {
	*x = AnswerResult{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerResult) ProtoMessage() {}

func (x *AnswerResult) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerResult.ProtoReflect.Descriptor instead.
func (*AnswerResult) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{33}
}

func (x *AnswerResult) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *AnswerResult) GetIsCorrect() bool {
	if x != nil {
		return x.IsCorrect
	}
	return false
}

type ValidateQuestionAnswersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuizId        string                 `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	QuestionId    string                 `protobuf:"bytes,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Answers       []string               `protobuf:"bytes,3,rep,name=answers,proto3" json:"answers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateQuestionAnswersRequest) Reset() {
	*x = ValidateQuestionAnswersRequest{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateQuestionAnswersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateQuestionAnswersRequest) ProtoMessage() {}

func (x *ValidateQuestionAnswersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateQuestionAnswersRequest.ProtoReflect.Descriptor instead.
func (*ValidateQuestionAnswersRequest) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{34}
}

func (x *ValidateQuestionAnswersRequest) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *ValidateQuestionAnswersRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *ValidateQuestionAnswersRequest) GetAnswers() []string {
	if x != nil {
		return x.Answers
	}
	return nil
}

type ValidateQuestionAnswersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*AnswerResult        `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateQuestionAnswersResponse) Reset() {
	*x = ValidateQuestionAnswersResponse{}
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateQuestionAnswersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateQuestionAnswersResponse) ProtoMessage() {}

func (x *ValidateQuestionAnswersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quizzes_v1_quizzes_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateQuestionAnswersResponse.ProtoReflect.Descriptor instead.
func (*ValidateQuestionAnswersResponse) Descriptor() ([]byte, []int) {
	return file_quizzes_v1_quizzes_proto_rawDescGZIP(), []int{35}
}

func (x *ValidateQuestionAnswersResponse) GetResults() []*AnswerResult {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_quizzes_v1_quizzes_proto protoreflect.FileDescriptor

var file_quizzes_v1_quizzes_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x69,
	0x7a, 0x7a, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x71, 0x75, 0x69, 0x7a,
	0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xfd, 0x01, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x22, 0x5e, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x22, 0x65, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x69,
	0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x71, 0x75, 0x69,
	0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52,
	0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x75, 0x69,
	0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x22, 0x92, 0x04, 0x0a, 0x04, 0x51, 0x75, 0x69, 0x7a, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x48, 0x01, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x75,
	0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x24, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x94, 0x03, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x71, 0x75, 0x69,
	0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b,
	0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x37, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x71, 0x75, 0x69, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a,
	0x52, 0x04, 0x71, 0x75, 0x69, 0x7a, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x69,
	0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x51,
	0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x71,
	0x75, 0x69, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x75, 0x69, 0x7a,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x04, 0x71, 0x75, 0x69, 0x7a, 0x22, 0x5a,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x52,
	0x07, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71,
	0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xc8, 0x03, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x44, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x37, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x71, 0x75, 0x69, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x52,
	0x04, 0x71, 0x75, 0x69, 0x7a, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51,
	0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x72, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51,
	0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x71,
	0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71,
	0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x07, 0x71, 0x75, 0x69,
	0x7a, 0x7a, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x01,
	0x0a, 0x12, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x71,
	0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x75,
	0x69, 0x7a, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x85,
	0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69,
	0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x22, 0x79, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x75, 0x69,
	0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x71,
	0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x75,
	0x69, 0x7a, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x22,
	0x96, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x6c, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71,
	0x75, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x0c, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x22, 0x74,
	0x0a, 0x1e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x73, 0x22, 0x52, 0x0a, 0x1f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2a, 0x38, 0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x41, 0x53, 0x59, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x48, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x58, 0x50, 0x45, 0x52, 0x54,
	0x10, 0x03, 0x32, 0xac, 0x04, 0x0a, 0x07, 0x51, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x12, 0x5a,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x12, 0x1a, 0x2e, 0x71,
	0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69,
	0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a,
	0x22, 0x08, 0x2f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x51, 0x75, 0x69, 0x7a, 0x12, 0x17, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x69, 0x7a,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f,
	0x12, 0x0d, 0x2f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x51, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x12, 0x18, 0x2e, 0x71, 0x75,
	0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x71, 0x75, 0x69, 0x7a, 0x7a,
	0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a,
	0x12, 0x1a, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x71,
	0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69,
	0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x12, 0x3a, 0x01, 0x2a, 0x32, 0x0d, 0x2f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x5c, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x69,
	0x7a, 0x12, 0x1a, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75,
	0x69, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x2a, 0x0d, 0x2f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x5e, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x69, 0x7a, 0x12,
	0x1a, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x71, 0x75,
	0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x69, 0x7a,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11,
	0x12, 0x0f, 0x2f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x32, 0x88, 0x04, 0x0a, 0x0d, 0x51, 0x75, 0x69, 0x7a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x71, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x71, 0x75, 0x69, 0x7a, 0x7a,
	0x65, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x71, 0x75, 0x69, 0x7a,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x71, 0x75, 0x69, 0x7a,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x32, 0x2a, 0x2f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x2f,
	0x7b, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x2a, 0x2a, 0x2f,
	0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x71, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x71, 0x75, 0x69, 0x7a,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c,
	0x2f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x84, 0x06, 0x0a,
	0x0b, 0x51, 0x75, 0x69, 0x7a, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0xb4, 0x01, 0x0a,
	0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x40, 0x3a, 0x01, 0x2a, 0x22, 0x3b, 0x2f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73,
	0x2f, 0x7b, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x71,
	0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x96, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x12, 0x1c, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x3a, 0x01, 0x2a, 0x32, 0x3e, 0x2f, 0x71, 0x75, 0x69, 0x7a,
	0x7a, 0x65, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x93, 0x01, 0x0a, 0x0c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x2e, 0x71, 0x75, 0x69,
	0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x2a,
	0x3e, 0x2f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x69, 0x7a, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0x81, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1a,
	0x2e, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x71, 0x75, 0x69,
	0x7a, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12,
	0x32, 0x2f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x69, 0x7a, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x73, 0x42, 0x44, 0x0a, 0x19, 0x64, 0x65, 0x76, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x42, 0x0b, 0x51, 0x75, 0x69, 0x7a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x31, 0x50, 0x01, 0x5a,
	0x18, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x71, 0x75, 0x69, 0x7a,
	0x7a, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_quizzes_v1_quizzes_proto_rawDescOnce sync.Once
	file_quizzes_v1_quizzes_proto_rawDescData []byte
)

func file_quizzes_v1_quizzes_proto_rawDescGZIP() []byte {
	file_quizzes_v1_quizzes_proto_rawDescOnce.Do(func() {
		file_quizzes_v1_quizzes_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_quizzes_v1_quizzes_proto_rawDesc), len(file_quizzes_v1_quizzes_proto_rawDesc)))
	})
	return file_quizzes_v1_quizzes_proto_rawDescData
}

var file_quizzes_v1_quizzes_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_quizzes_v1_quizzes_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_quizzes_v1_quizzes_proto_goTypes = []any{
	(Difficulty)(0),                         // 0: quiz.v1.Difficulty
	(*Audit)(nil),                           // 1: quiz.v1.Audit
	(*Pagination)(nil),                      // 2: quiz.v1.Pagination
	(*Choice)(nil),                          // 3: quiz.v1.Choice
	(*QuizQuestion)(nil),                    // 4: quiz.v1.QuizQuestion
	(*Quiz)(nil),                            // 5: quiz.v1.Quiz
	(*CreateQuizRequest)(nil),               // 6: quiz.v1.CreateQuizRequest
	(*CreateQuizResponse)(nil),              // 7: quiz.v1.CreateQuizResponse
	(*GetQuizRequest)(nil),                  // 8: quiz.v1.GetQuizRequest
	(*GetQuizResponse)(nil),                 // 9: quiz.v1.GetQuizResponse
	(*ListQuizRequest)(nil),                 // 10: quiz.v1.ListQuizRequest
	(*ListQuizResponse)(nil),                // 11: quiz.v1.ListQuizResponse
	(*UpdateQuizRequest)(nil),               // 12: quiz.v1.UpdateQuizRequest
	(*UpdateQuizResponse)(nil),              // 13: quiz.v1.UpdateQuizResponse
	(*DeleteQuizRequest)(nil),               // 14: quiz.v1.DeleteQuizRequest
	(*DeleteQuizResponse)(nil),              // 15: quiz.v1.DeleteQuizResponse
	(*SearchQuizRequest)(nil),               // 16: quiz.v1.SearchQuizRequest
	(*SearchQuizResponse)(nil),              // 17: quiz.v1.SearchQuizResponse
	(*AddQuestionRequest)(nil),              // 18: quiz.v1.AddQuestionRequest
	(*AddQuestionResponse)(nil),             // 19: quiz.v1.AddQuestionResponse
	(*UpdateQuestionRequest)(nil),           // 20: quiz.v1.UpdateQuestionRequest
	(*UpdateQuestionResponse)(nil),          // 21: quiz.v1.UpdateQuestionResponse
	(*DeleteQuestionRequest)(nil),           // 22: quiz.v1.DeleteQuestionRequest
	(*DeleteQuestionResponse)(nil),          // 23: quiz.v1.DeleteQuestionResponse
	(*ListQuestionRequest)(nil),             // 24: quiz.v1.ListQuestionRequest
	(*ListQuestionResponse)(nil),            // 25: quiz.v1.ListQuestionResponse
	(*CreateChoiceRequest)(nil),             // 26: quiz.v1.CreateChoiceRequest
	(*CreateChoiceResponse)(nil),            // 27: quiz.v1.CreateChoiceResponse
	(*UpdateChoiceRequest)(nil),             // 28: quiz.v1.UpdateChoiceRequest
	(*UpdateChoiceResponse)(nil),            // 29: quiz.v1.UpdateChoiceResponse
	(*DeleteChoiceRequest)(nil),             // 30: quiz.v1.DeleteChoiceRequest
	(*DeleteChoiceResponse)(nil),            // 31: quiz.v1.DeleteChoiceResponse
	(*ListChoiceRequest)(nil),               // 32: quiz.v1.ListChoiceRequest
	(*ListChoiceResponse)(nil),              // 33: quiz.v1.ListChoiceResponse
	(*AnswerResult)(nil),                    // 34: quiz.v1.AnswerResult
	(*ValidateQuestionAnswersRequest)(nil),  // 35: quiz.v1.ValidateQuestionAnswersRequest
	(*ValidateQuestionAnswersResponse)(nil), // 36: quiz.v1.ValidateQuestionAnswersResponse
	nil,                                     // 37: quiz.v1.Quiz.MetadataEntry
	nil,                                     // 38: quiz.v1.CreateQuizRequest.MetadataEntry
	nil,                                     // 39: quiz.v1.UpdateQuizRequest.MetadataEntry
}
var file_quizzes_v1_quizzes_proto_depIdxs = []int32{
	0,  // 0: quiz.v1.QuizQuestion.difficulty:type_name -> quiz.v1.Difficulty
	1,  // 1: quiz.v1.QuizQuestion.audit:type_name -> quiz.v1.Audit
	0,  // 2: quiz.v1.Quiz.difficulty:type_name -> quiz.v1.Difficulty
	37, // 3: quiz.v1.Quiz.metadata:type_name -> quiz.v1.Quiz.MetadataEntry
	1,  // 4: quiz.v1.Quiz.audit:type_name -> quiz.v1.Audit
	38, // 5: quiz.v1.CreateQuizRequest.metadata:type_name -> quiz.v1.CreateQuizRequest.MetadataEntry
	5,  // 6: quiz.v1.CreateQuizResponse.quiz:type_name -> quiz.v1.Quiz
	5,  // 7: quiz.v1.GetQuizResponse.quiz:type_name -> quiz.v1.Quiz
	2,  // 8: quiz.v1.ListQuizRequest.pagination:type_name -> quiz.v1.Pagination
	5,  // 9: quiz.v1.ListQuizResponse.quizzes:type_name -> quiz.v1.Quiz
	2,  // 10: quiz.v1.ListQuizResponse.pagination:type_name -> quiz.v1.Pagination
	39, // 11: quiz.v1.UpdateQuizRequest.metadata:type_name -> quiz.v1.UpdateQuizRequest.MetadataEntry
	5,  // 12: quiz.v1.UpdateQuizResponse.quiz:type_name -> quiz.v1.Quiz
	2,  // 13: quiz.v1.SearchQuizRequest.pagination:type_name -> quiz.v1.Pagination
	5,  // 14: quiz.v1.SearchQuizResponse.quizzes:type_name -> quiz.v1.Quiz
	2,  // 15: quiz.v1.SearchQuizResponse.pagination:type_name -> quiz.v1.Pagination
	0,  // 16: quiz.v1.AddQuestionRequest.difficulty:type_name -> quiz.v1.Difficulty
	4,  // 17: quiz.v1.AddQuestionResponse.question:type_name -> quiz.v1.QuizQuestion
	4,  // 18: quiz.v1.UpdateQuestionRequest.question:type_name -> quiz.v1.QuizQuestion
	4,  // 19: quiz.v1.UpdateQuestionResponse.question:type_name -> quiz.v1.QuizQuestion
	4,  // 20: quiz.v1.ListQuestionResponse.questions:type_name -> quiz.v1.QuizQuestion
	3,  // 21: quiz.v1.CreateChoiceResponse.choice:type_name -> quiz.v1.Choice
	3,  // 22: quiz.v1.UpdateChoiceResponse.choice:type_name -> quiz.v1.Choice
	3,  // 23: quiz.v1.ListChoiceResponse.choices:type_name -> quiz.v1.Choice
	34, // 24: quiz.v1.ValidateQuestionAnswersResponse.results:type_name -> quiz.v1.AnswerResult
	6,  // 25: quiz.v1.Quizzes.CreateQuiz:input_type -> quiz.v1.CreateQuizRequest
	8,  // 26: quiz.v1.Quizzes.GetQuiz:input_type -> quiz.v1.GetQuizRequest
	10, // 27: quiz.v1.Quizzes.ListQuiz:input_type -> quiz.v1.ListQuizRequest
	12, // 28: quiz.v1.Quizzes.UpdateQuiz:input_type -> quiz.v1.UpdateQuizRequest
	14, // 29: quiz.v1.Quizzes.DeleteQuiz:input_type -> quiz.v1.DeleteQuizRequest
	16, // 30: quiz.v1.Quizzes.SearchQuiz:input_type -> quiz.v1.SearchQuizRequest
	18, // 31: quiz.v1.QuizQuestions.AddQuestion:input_type -> quiz.v1.AddQuestionRequest
	20, // 32: quiz.v1.QuizQuestions.UpdateQuestion:input_type -> quiz.v1.UpdateQuestionRequest
	22, // 33: quiz.v1.QuizQuestions.DeleteQuestion:input_type -> quiz.v1.DeleteQuestionRequest
	24, // 34: quiz.v1.QuizQuestions.ListQuestion:input_type -> quiz.v1.ListQuestionRequest
	35, // 35: quiz.v1.QuizAnswers.ValidateQuestionAnswers:input_type -> quiz.v1.ValidateQuestionAnswersRequest
	26, // 36: quiz.v1.QuizAnswers.CreateChoice:input_type -> quiz.v1.CreateChoiceRequest
	28, // 37: quiz.v1.QuizAnswers.UpdateChoice:input_type -> quiz.v1.UpdateChoiceRequest
	30, // 38: quiz.v1.QuizAnswers.DeleteChoice:input_type -> quiz.v1.DeleteChoiceRequest
	32, // 39: quiz.v1.QuizAnswers.ListChoice:input_type -> quiz.v1.ListChoiceRequest
	7,  // 40: quiz.v1.Quizzes.CreateQuiz:output_type -> quiz.v1.CreateQuizResponse
	9,  // 41: quiz.v1.Quizzes.GetQuiz:output_type -> quiz.v1.GetQuizResponse
	11, // 42: quiz.v1.Quizzes.ListQuiz:output_type -> quiz.v1.ListQuizResponse
	13, // 43: quiz.v1.Quizzes.UpdateQuiz:output_type -> quiz.v1.UpdateQuizResponse
	15, // 44: quiz.v1.Quizzes.DeleteQuiz:output_type -> quiz.v1.DeleteQuizResponse
	17, // 45: quiz.v1.Quizzes.SearchQuiz:output_type -> quiz.v1.SearchQuizResponse
	19, // 46: quiz.v1.QuizQuestions.AddQuestion:output_type -> quiz.v1.AddQuestionResponse
	21, // 47: quiz.v1.QuizQuestions.UpdateQuestion:output_type -> quiz.v1.UpdateQuestionResponse
	23, // 48: quiz.v1.QuizQuestions.DeleteQuestion:output_type -> quiz.v1.DeleteQuestionResponse
	25, // 49: quiz.v1.QuizQuestions.ListQuestion:output_type -> quiz.v1.ListQuestionResponse
	36, // 50: quiz.v1.QuizAnswers.ValidateQuestionAnswers:output_type -> quiz.v1.ValidateQuestionAnswersResponse
	27, // 51: quiz.v1.QuizAnswers.CreateChoice:output_type -> quiz.v1.CreateChoiceResponse
	29, // 52: quiz.v1.QuizAnswers.UpdateChoice:output_type -> quiz.v1.UpdateChoiceResponse
	31, // 53: quiz.v1.QuizAnswers.DeleteChoice:output_type -> quiz.v1.DeleteChoiceResponse
	33, // 54: quiz.v1.QuizAnswers.ListChoice:output_type -> quiz.v1.ListChoiceResponse
	40, // [40:55] is the sub-list for method output_type
	25, // [25:40] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_quizzes_v1_quizzes_proto_init() }
func file_quizzes_v1_quizzes_proto_init() {
	if File_quizzes_v1_quizzes_proto != nil {
		return
	}
	file_quizzes_v1_quizzes_proto_msgTypes[0].OneofWrappers = []any{}
	file_quizzes_v1_quizzes_proto_msgTypes[1].OneofWrappers = []any{}
	file_quizzes_v1_quizzes_proto_msgTypes[4].OneofWrappers = []any{}
	file_quizzes_v1_quizzes_proto_msgTypes[5].OneofWrappers = []any{}
	file_quizzes_v1_quizzes_proto_msgTypes[9].OneofWrappers = []any{}
	file_quizzes_v1_quizzes_proto_msgTypes[10].OneofWrappers = []any{}
	file_quizzes_v1_quizzes_proto_msgTypes[11].OneofWrappers = []any{}
	file_quizzes_v1_quizzes_proto_msgTypes[15].OneofWrappers = []any{}
	file_quizzes_v1_quizzes_proto_msgTypes[16].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_quizzes_v1_quizzes_proto_rawDesc), len(file_quizzes_v1_quizzes_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_quizzes_v1_quizzes_proto_goTypes,
		DependencyIndexes: file_quizzes_v1_quizzes_proto_depIdxs,
		EnumInfos:         file_quizzes_v1_quizzes_proto_enumTypes,
		MessageInfos:      file_quizzes_v1_quizzes_proto_msgTypes,
	}.Build()
	File_quizzes_v1_quizzes_proto = out.File
	file_quizzes_v1_quizzes_proto_goTypes = nil
	file_quizzes_v1_quizzes_proto_depIdxs = nil
}
